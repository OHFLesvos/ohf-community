{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./resources/js/imageupload.js","webpack:///./node_modules/cropperjs/dist/cropper.js","webpack:///./node_modules/node-snackbar/src/js/snackbar.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Cropper","require","Snackbar","showAlert","message","show","text","duration","pos","actionText","constraints","video","width","min","height","window","addEventListener","cropper","upload","document","getElementById","remove","preview","image","input","$progress","$","$progressBar","$alert","$modal","cropButton","cropTitle","captureTitle","rotateRight","rotateLeft","startCaptureButton","captureButton","player","captureCanvas","click","hidden","src","navigator","mediaDevices","getUserMedia","then","stream","modal","srcObject","getVideoTracks","forEach","track","stop","videoHeight","videoWidth","getContext","drawImage","toDataURL","destroy","viewMode","e","reader","file","files","target","done","url","hide","length","URL","createObjectURL","FileReader","onload","result","readAsDataURL","on","autoCrop","rotate","initialPreviewURL","canvas","getCroppedCanvas","maxWidth","maxHeight","attr","removeClass","toBlob","blob","formData","FormData","append","csrfToken","ajax","imageUploadUrl","method","data","processData","contentType","xhr","XMLHttpRequest","onprogress","percent","percentage","lengthComputable","Math","round","loaded","total","success","error","complete","confirm","imageDeleteConfirmation","imageDeleteUrl","_token","_typeof","obj","iterator","constructor","_defineProperties","props","descriptor","configurable","writable","_toConsumableArray","arr","Array","isArray","arr2","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","IS_BROWSER","WINDOW","IS_TOUCH_DEVICE","documentElement","HAS_POINTER_EVENT","CLASS_CROP","concat","CLASS_DISABLED","CLASS_HIDDEN","CLASS_HIDE","CLASS_INVISIBLE","CLASS_MODAL","CLASS_MOVE","DATA_ACTION","DATA_PREVIEW","EVENT_TOUCH_START","EVENT_TOUCH_MOVE","EVENT_TOUCH_END","EVENT_POINTER_DOWN","EVENT_POINTER_MOVE","EVENT_POINTER_UP","REGEXP_ACTIONS","REGEXP_DATA_URL_JPEG","REGEXP_TAG_NAME","DEFAULTS","dragMode","initialAspectRatio","NaN","aspectRatio","responsive","restore","checkCrossOrigin","checkOrientation","guides","center","highlight","background","autoCropArea","movable","rotatable","scalable","zoomable","zoomOnTouch","zoomOnWheel","wheelZoomRatio","cropBoxMovable","cropBoxResizable","toggleDragModeOnDblclick","minCanvasWidth","minCanvasHeight","minCropBoxWidth","minCropBoxHeight","minContainerWidth","minContainerHeight","ready","cropstart","cropmove","cropend","crop","zoom","isNaN","Number","isNumber","isPositiveNumber","Infinity","isUndefined","isObject","isPlainObject","_constructor","isFunction","slice","toArray","callback","keys","assign","_len","arguments","args","_key","arg","REGEXP_DECIMALS","normalizeDecimalNumber","times","undefined","test","REGEXP_SUFFIX","setStyle","element","styles","style","addClass","elem","classList","add","className","trim","indexOf","replace","toggleClass","added","REGEXP_CAMEL_CASE","toParamCase","toLowerCase","getData","dataset","getAttribute","setData","setAttribute","REGEXP_SPACES","onceSupported","supported","once","listener","options","set","removeEventListener","removeListener","type","handler","split","event","listeners","addListener","_handler","_element$listeners","_len2","_key2","apply","dispatchEvent","Event","CustomEvent","detail","bubbles","cancelable","createEvent","initCustomEvent","getOffset","box","getBoundingClientRect","left","pageXOffset","clientLeft","top","pageYOffset","clientTop","location","REGEXP_ORIGINS","isCrossOriginURL","parts","match","protocol","hostname","port","addTimestamp","timestamp","Date","getTime","getTransforms","_ref","scaleX","scaleY","translateX","translateY","values","push","transform","join","WebkitTransform","msTransform","getPointer","_ref2","endOnly","pageX","pageY","end","endX","endY","startX","startY","getAdjustedSizes","_ref4","isValidWidth","isValidHeight","adjustedWidth","fromCharCode","String","REGEXP_DATA_URL_HEAD","resetAndGetOrientation","arrayBuffer","orientation","dataView","DataView","littleEndian","app1Start","ifdStart","getUint8","byteLength","offset","exifIDCode","tiffOffset","start","str","getStringFromCharCode","endianness","getUint16","firstIFDOffset","getUint32","_offset","_length","setUint16","render","this","initContainer","initCanvas","initCropBox","renderCanvas","cropped","renderCropBox","container","containerData","max","offsetWidth","offsetHeight","imageData","rotated","abs","naturalWidth","naturalHeight","canvasWidth","canvasHeight","canvasData","oldLeft","oldTop","limited","limitCanvas","initialImageData","initialCanvasData","sizeLimited","positionLimited","cropBoxData","_getAdjustedSizes","minWidth","minHeight","newCanvasLeft","newCanvasTop","minLeft","minTop","maxLeft","maxTop","changed","transformed","_getRotatedSizes","_ref5","degree","arc","PI","sinArc","sin","cosArc","cos","newWidth","newHeight","getRotatedSizes","renderImage","limitCropBox","output","initialCropBoxData","maxCropBoxWidth","maxCropBoxHeight","face","cropBox","disabled","initPreview","crossOrigin","crossOriginUrl","createElement","viewBox","appendChild","viewBoxImage","previews","ownerDocument","querySelectorAll","querySelector","el","img","html","innerHTML","cssText","resetPreview","removeAttribute","removeData","cropBoxWidth","cropBoxHeight","originalWidth","originalHeight","ratio","getElementsByTagName","events","onCropStart","cropStart","onWheel","wheel","passive","capture","onDblclick","dblclick","onCropMove","cropMove","onCropEnd","cropEnd","onResize","resize","unbind","handlers","getCanvasData","getCropBoxData","setCanvasData","setCropBoxData","setDragMode","dragBox","contains","_this","delta","preventDefault","wheeling","setTimeout","deltaY","wheelDelta","buttons","button","ctrlKey","action","pointers","changedTouches","touch","identifier","pointerId","originalEvent","cropping","change","right","bottom","renderable","shiftKey","pointer","range","x","y","check","side","move","pointers2","ratios","pointer2","x1","y1","x2","y2","z1","sqrt","sort","a","b","getMaxZoomRatio","methods","reset","clear","hasSameSize","isImg","replaced","uncreate","load","enable","disable","originalUrl","offsetX","offsetY","_this$canvasData","moveTo","_originalEvent","zoomTo","pivot","oldRatio","count","_ref3","getPointersCenter","rotateTo","_scaleX","scale","_scaleY","rounded","getContainerData","getImageData","sized","widthChanged","heightChanged","HTMLCanvasElement","source","_ref6","_ref7","_ref8","imageAspectRatio","imageNaturalWidth","imageNaturalHeight","_ref6$rotate","_ref6$scaleX","_ref6$scaleY","_ref8$fillColor","fillColor","_ref8$imageSmoothingE","imageSmoothingEnabled","_ref8$imageSmoothingQ","imageSmoothingQuality","_ref8$maxWidth","_ref8$maxHeight","_ref8$minWidth","_ref8$minHeight","context","maxSizes","minSizes","destMaxSizes","destMinSizes","destWidth","destHeight","params","fillStyle","fillRect","save","translate","map","param","floor","getSourceCanvas","_this$getData","initialX","initialY","initialWidth","initialHeight","_options$imageSmoothi","srcWidth","srcHeight","dstX","dstY","dstWidth","dstHeight","sourceWidth","sourceHeight","srcX","srcY","setAspectRatio","croppable","AnotherCropper","instance","Constructor","_classCallCheck","tagName","Error","reloading","sizing","init","staticProps","protoProps","ArrayBuffer","read","base64","binary","atob","uint8","Uint8Array","charCodeAt","clone","onabort","onerror","ontimeout","getResponseHeader","abort","response","onloadend","open","responseType","withCredentials","send","mimeType","chunks","subarray","btoa","arrayBufferToDataURL","_parseOrientation","parseOrientation","parentNode","insertBefore","nextSibling","_this2","IS_SAFARI","userAgent","build","sizingImage","body","removeChild","template","getElementsByClassName","unbuild","factory","__WEBPACK_AMD_DEFINE_RESULT__","root","current","$defaults","textColor","showAction","actionTextAria","actionTextColor","showSecondButton","secondButtonText","secondButtonAria","secondButtonTextColor","backgroundColor","customClass","onActionClick","opacity","onSecondButtonClick","onClose","$options","Extend","$parent","parentElement","snackbar","$p","margin","padding","color","fontSize","fontWeight","lineHeight","secondButton","actionButton","elapsed","propertyName","getComputedStyle","close","extended","deep","merge","prop"],"mappings":"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","file":"/js/imageupload.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 184);\n","var Cropper = require('cropperjs').default;\nvar Snackbar = require('node-snackbar');\n\nfunction showAlert(message) {\n    Snackbar.show({\n        text: message,\n        duration: 2500,\n        pos: 'bottom-center',\n        actionText: null,\n    });\n}\n\n// Video constraints\nconst constraints = {\n    video: {\n        width: {\n            min: 1280\n        },\n        height: {\n            min: 720\n        }\n    }\n};\n\nwindow.addEventListener('DOMContentLoaded', () => {\n    var upload = document.getElementById('upload');\n    var remove = document.getElementById('delete');\n    var preview = document.getElementById('preview');\n    var image = document.getElementById('image');\n    var input = document.getElementById('input');\n    var $progress = $('.progress');\n    var $progressBar = $('.progress-bar');\n    var $alert = $('.alert');\n    var $modal = $('#modal');\n    const cropButton = document.getElementById('crop');\n    const cropTitle = document.getElementById('cropTitle');\n    const captureTitle = document.getElementById('captureTitle');\n    \n    const rotateRight = document.getElementById('rotate-right');\n    const rotateLeft = document.getElementById('rotate-left');\n\n    const startCaptureButton = document.getElementById('startCapture');\n    const captureButton = document.getElementById('capture');\n    const player = document.getElementById('player');\n    const captureCanvas = document.getElementById('captureCanvas');\n\n    var cropper;\n\n    // Click on \"Upload\" button\n    upload.addEventListener('click', () => {\n        input.click();\n    });\n\n    // Click on \"Capture\" button\n    startCaptureButton.addEventListener('click', () => {\n        image.hidden = true;\n        player.hidden = false;\n        cropTitle.hidden = true;\n        captureTitle.hidden = false;\n        rotateRight.hidden = true;\n        rotateLeft.hidden = true;\n        image.src = null;\n\n        navigator.mediaDevices.getUserMedia(constraints)\n            .then((stream) => {\n               \n                captureButton.hidden = false;\n                cropButton.hidden = true;\n\n                $modal.modal('show');\n                // Attach the video stream to the video element and autoplay.\n                player.srcObject = stream;\n            });\n        // TODO exception handling\n    });\n\n     // Capture recorded image\n    captureButton.addEventListener('click', () => {\n        player.srcObject.getVideoTracks().forEach(track => track.stop());\n  \n        captureCanvas.height = player.videoHeight;\n        captureCanvas.width = player.videoWidth;\n        var context = captureCanvas.getContext('2d');\n        context.drawImage(player, 0, 0, captureCanvas.width, captureCanvas.height);\n\n        image.src = captureCanvas.toDataURL(\"image/png\");\n\n        image.hidden = false;\n        player.hidden = true;\n        captureButton.hidden = true;\n        cropButton.hidden = false;\n        rotateRight.hidden = false;\n        rotateLeft.hidden = false;\n\n        cropTitle.hidden = false;\n        captureTitle.hidden = true;\n        \n        if (cropper) {\n            cropper.destroy();\n        }\n        cropper = new Cropper(image, {\n            viewMode: 3,\n        });\n    });\n\n    // Upload file\n    input.addEventListener('change', (e) => {\n        var files = e.target.files;\n        var done = function (url) {\n            input.value = '';\n            image.src = url;\n\n            image.hidden = false;\n            rotateRight.hidden = false;\n            rotateLeft.hidden = false;\n            player.hidden = true;\n            captureButton.hidden = true;\n            cropButton.hidden = false;\n            cropTitle.hidden = false;\n            captureTitle.hidden = true;  \n\n            $alert.hide();\n            $modal.modal('show');\n        };\n        var reader;\n        var file;\n\n        if (files && files.length > 0) {\n            file = files[0];\n            if (URL) {\n                done(URL.createObjectURL(file));\n            } else if (FileReader) {\n                reader = new FileReader();\n                reader.onload = function (e) {\n                    done(reader.result);\n                };\n                reader.readAsDataURL(file);\n            }\n        }\n    });\n\n    $modal.on('shown.bs.modal', () => {\n        cropper = new Cropper(image, {\n            viewMode: 1,\n            autoCrop: false,\n        });\n    }).on('hidden.bs.modal', () => {\n        cropper.destroy();\n        cropper = null;\n\n        // Stop all video streams.\n        if (player.srcObject != null) {\n            player.srcObject.getVideoTracks().forEach(track => track.stop());\n        }\n    });\n\n    rotateRight.addEventListener('click', () => {\n        if (cropper) {\n            cropper.rotate(90);\n        }\n    });\n    rotateLeft.addEventListener('click', () => {\n        if (cropper) {\n            cropper.rotate(-90);\n        }\n    });    \n\n    cropButton.addEventListener('click', () => {\n        var initialPreviewURL;\n        var canvas;\n\n        $modal.modal('hide');\n\n        if (cropper) {\n            canvas = cropper.getCroppedCanvas({\n                maxWidth: 800,\n                maxHeight: 800,\n             });\n            initialPreviewURL = preview.src;\n            preview.src = canvas.toDataURL();\n            preview.hidden = false;\n            $progressBar.width('0%').attr('aria-valuenow', 0).text('0%');\n            $progress.show();\n            $alert.removeClass('alert-success alert-warning');\n            canvas.toBlob(function (blob) {\n          \n                var formData = new FormData();\n                formData.append('img', blob);\n                formData.append(\"_token\", csrfToken);\n          \n                // AJAX request\n                $.ajax(imageUploadUrl, {\n                    method: 'POST',\n                    data: formData,\n                    processData: false,\n                    contentType: false,\n\n                    xhr: () => {\n                        var xhr = new XMLHttpRequest();\n\n                        xhr.upload.onprogress = function (e) {\n                            var percent = '0';\n                            var percentage = '0%';\n\n                            if (e.lengthComputable) {\n                            percent = Math.round((e.loaded / e.total) * 100);\n                            percentage = percent + '%';\n                            $progressBar.width(percentage).attr('aria-valuenow', percent).text(percentage);\n                            }\n                        };\n\n                        return xhr;\n                    },\n\n                    // Success\n                    success: () => {\n                        showAlert('Upload success');\n                        remove.hidden = false;\n                    },\n\n                    // Error\n                    error: () => {\n                        preview.src = initialPreviewURL;\n                        showAlert('Upload error');\n                    },\n\n                    // Complete\n                    complete: () => {\n                        $progress.hide();\n                    },\n                });\n            });\n        }\n    });\n\n    // Remove image\n    if (remove) {\n        remove.addEventListener('click', () => {\n            if (confirm(imageDeleteConfirmation)) {\n                $.ajax(imageDeleteUrl, {\n                    method: 'DELETE',\n                    data: {\n                        _token: csrfToken\n                    },\n        \n                    // Success\n                    success: () => {\n                        showAlert('Delete success');\n                        remove.hidden = true;\n                        preview.hidden = true;\n                    },\n        \n                    // Error\n                    error: () => {\n                        showAlert('Delete error');\n                    },\n                });\n            }\n        });\n    }\n});\n","/*!\n * Cropper.js v1.5.2\n * https://fengyuanchen.github.io/cropperjs\n *\n * Copyright 2015-present Chen Fengyuan\n * Released under the MIT license\n *\n * Date: 2019-06-30T06:01:05.296Z\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.Cropper = factory());\n}(this, function () { 'use strict';\n\n  function _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  var IS_BROWSER = typeof window !== 'undefined';\n  var WINDOW = IS_BROWSER ? window : {};\n  var IS_TOUCH_DEVICE = IS_BROWSER ? 'ontouchstart' in WINDOW.document.documentElement : false;\n  var HAS_POINTER_EVENT = IS_BROWSER ? 'PointerEvent' in WINDOW : false;\n  var NAMESPACE = 'cropper'; // Actions\n\n  var ACTION_ALL = 'all';\n  var ACTION_CROP = 'crop';\n  var ACTION_MOVE = 'move';\n  var ACTION_ZOOM = 'zoom';\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw'; // Classes\n\n  var CLASS_CROP = \"\".concat(NAMESPACE, \"-crop\");\n  var CLASS_DISABLED = \"\".concat(NAMESPACE, \"-disabled\");\n  var CLASS_HIDDEN = \"\".concat(NAMESPACE, \"-hidden\");\n  var CLASS_HIDE = \"\".concat(NAMESPACE, \"-hide\");\n  var CLASS_INVISIBLE = \"\".concat(NAMESPACE, \"-invisible\");\n  var CLASS_MODAL = \"\".concat(NAMESPACE, \"-modal\");\n  var CLASS_MOVE = \"\".concat(NAMESPACE, \"-move\"); // Data keys\n\n  var DATA_ACTION = \"\".concat(NAMESPACE, \"Action\");\n  var DATA_PREVIEW = \"\".concat(NAMESPACE, \"Preview\"); // Drag modes\n\n  var DRAG_MODE_CROP = 'crop';\n  var DRAG_MODE_MOVE = 'move';\n  var DRAG_MODE_NONE = 'none'; // Events\n\n  var EVENT_CROP = 'crop';\n  var EVENT_CROP_END = 'cropend';\n  var EVENT_CROP_MOVE = 'cropmove';\n  var EVENT_CROP_START = 'cropstart';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_TOUCH_START = IS_TOUCH_DEVICE ? 'touchstart' : 'mousedown';\n  var EVENT_TOUCH_MOVE = IS_TOUCH_DEVICE ? 'touchmove' : 'mousemove';\n  var EVENT_TOUCH_END = IS_TOUCH_DEVICE ? 'touchend touchcancel' : 'mouseup';\n  var EVENT_POINTER_DOWN = HAS_POINTER_EVENT ? 'pointerdown' : EVENT_TOUCH_START;\n  var EVENT_POINTER_MOVE = HAS_POINTER_EVENT ? 'pointermove' : EVENT_TOUCH_MOVE;\n  var EVENT_POINTER_UP = HAS_POINTER_EVENT ? 'pointerup pointercancel' : EVENT_TOUCH_END;\n  var EVENT_READY = 'ready';\n  var EVENT_RESIZE = 'resize';\n  var EVENT_WHEEL = 'wheel';\n  var EVENT_ZOOM = 'zoom'; // Mime types\n\n  var MIME_TYPE_JPEG = 'image/jpeg'; // RegExps\n\n  var REGEXP_ACTIONS = /^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/;\n  var REGEXP_DATA_URL_JPEG = /^data:image\\/jpeg;base64,/;\n  var REGEXP_TAG_NAME = /^img|canvas$/i; // Misc\n  // Inspired by the default width and height of a canvas element.\n\n  var MIN_CONTAINER_WIDTH = 200;\n  var MIN_CONTAINER_HEIGHT = 100;\n\n  var DEFAULTS = {\n    // Define the view mode of the cropper\n    viewMode: 0,\n    // 0, 1, 2, 3\n    // Define the dragging mode of the cropper\n    dragMode: DRAG_MODE_CROP,\n    // 'crop', 'move' or 'none'\n    // Define the initial aspect ratio of the crop box\n    initialAspectRatio: NaN,\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n    // An object with the previous cropping result data\n    data: null,\n    // A selector for adding extra containers to preview\n    preview: '',\n    // Re-render the cropper when resize the window\n    responsive: true,\n    // Restore the cropped area after resize the window\n    restore: true,\n    // Check if the current image is a cross-origin image\n    checkCrossOrigin: true,\n    // Check the current image's Exif Orientation information\n    checkOrientation: true,\n    // Show the black modal\n    modal: true,\n    // Show the dashed lines for guiding\n    guides: true,\n    // Show the center indicator for guiding\n    center: true,\n    // Show the white modal to highlight the crop box\n    highlight: true,\n    // Show the grid background\n    background: true,\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n    // Enable to move the image\n    movable: true,\n    // Enable to rotate the image\n    rotatable: true,\n    // Enable to scale the image\n    scalable: true,\n    // Enable to zoom the image\n    zoomable: true,\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n    // Enable to move the crop box\n    cropBoxMovable: true,\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: 200,\n    minContainerHeight: 100,\n    // Shortcuts of events\n    ready: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n\n  var TEMPLATE = '<div class=\"cropper-container\" touch-action=\"none\">' + '<div class=\"cropper-wrap-box\">' + '<div class=\"cropper-canvas\"></div>' + '</div>' + '<div class=\"cropper-drag-box\"></div>' + '<div class=\"cropper-crop-box\">' + '<span class=\"cropper-view-box\"></span>' + '<span class=\"cropper-dashed dashed-h\"></span>' + '<span class=\"cropper-dashed dashed-v\"></span>' + '<span class=\"cropper-center\"></span>' + '<span class=\"cropper-face\"></span>' + '<span class=\"cropper-line line-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-line line-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-line line-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-line line-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-e\" data-cropper-action=\"e\"></span>' + '<span class=\"cropper-point point-n\" data-cropper-action=\"n\"></span>' + '<span class=\"cropper-point point-w\" data-cropper-action=\"w\"></span>' + '<span class=\"cropper-point point-s\" data-cropper-action=\"s\"></span>' + '<span class=\"cropper-point point-ne\" data-cropper-action=\"ne\"></span>' + '<span class=\"cropper-point point-nw\" data-cropper-action=\"nw\"></span>' + '<span class=\"cropper-point point-sw\" data-cropper-action=\"sw\"></span>' + '<span class=\"cropper-point point-se\" data-cropper-action=\"se\"></span>' + '</div>' + '</div>';\n\n  /**\n   * Check if the given value is not a number.\n   */\n\n  var isNaN = Number.isNaN || WINDOW.isNaN;\n  /**\n   * Check if the given value is a number.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a number, else `false`.\n   */\n\n  function isNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n  }\n  /**\n   * Check if the given value is a positive number.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a positive number, else `false`.\n   */\n\n  var isPositiveNumber = function isPositiveNumber(value) {\n    return value > 0 && value < Infinity;\n  };\n  /**\n   * Check if the given value is undefined.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is undefined, else `false`.\n   */\n\n  function isUndefined(value) {\n    return typeof value === 'undefined';\n  }\n  /**\n   * Check if the given value is an object.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is an object, else `false`.\n   */\n\n  function isObject(value) {\n    return _typeof(value) === 'object' && value !== null;\n  }\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  /**\n   * Check if the given value is a plain object.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.\n   */\n\n  function isPlainObject(value) {\n    if (!isObject(value)) {\n      return false;\n    }\n\n    try {\n      var _constructor = value.constructor;\n      var prototype = _constructor.prototype;\n      return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * Check if the given value is a function.\n   * @param {*} value - The value to check.\n   * @returns {boolean} Returns `true` if the given value is a function, else `false`.\n   */\n\n  function isFunction(value) {\n    return typeof value === 'function';\n  }\n  var slice = Array.prototype.slice;\n  /**\n   * Convert array-like or iterable object to an array.\n   * @param {*} value - The value to convert.\n   * @returns {Array} Returns a new array.\n   */\n\n  function toArray(value) {\n    return Array.from ? Array.from(value) : slice.call(value);\n  }\n  /**\n   * Iterate the given data.\n   * @param {*} data - The data to iterate.\n   * @param {Function} callback - The process function for each element.\n   * @returns {*} The original data.\n   */\n\n  function forEach(data, callback) {\n    if (data && isFunction(callback)) {\n      if (Array.isArray(data) || isNumber(data.length)\n      /* array-like */\n      ) {\n          toArray(data).forEach(function (value, key) {\n            callback.call(data, value, key, data);\n          });\n        } else if (isObject(data)) {\n        Object.keys(data).forEach(function (key) {\n          callback.call(data, data[key], key, data);\n        });\n      }\n    }\n\n    return data;\n  }\n  /**\n   * Extend the given object.\n   * @param {*} target - The target object to extend.\n   * @param {*} args - The rest objects for merging to the target object.\n   * @returns {Object} The extended object.\n   */\n\n  var assign = Object.assign || function assign(target) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (isObject(target) && args.length > 0) {\n      args.forEach(function (arg) {\n        if (isObject(arg)) {\n          Object.keys(arg).forEach(function (key) {\n            target[key] = arg[key];\n          });\n        }\n      });\n    }\n\n    return target;\n  };\n  var REGEXP_DECIMALS = /\\.\\d*(?:0|9){12}\\d*$/;\n  /**\n   * Normalize decimal number.\n   * Check out {@link http://0.30000000000000004.com/}\n   * @param {number} value - The value to normalize.\n   * @param {number} [times=100000000000] - The times for normalizing.\n   * @returns {number} Returns the normalized number.\n   */\n\n  function normalizeDecimalNumber(value) {\n    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;\n    return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;\n  }\n  var REGEXP_SUFFIX = /^width|height|left|top|marginLeft|marginTop$/;\n  /**\n   * Apply styles to the given element.\n   * @param {Element} element - The target element.\n   * @param {Object} styles - The styles for applying.\n   */\n\n  function setStyle(element, styles) {\n    var style = element.style;\n    forEach(styles, function (value, property) {\n      if (REGEXP_SUFFIX.test(property) && isNumber(value)) {\n        value = \"\".concat(value, \"px\");\n      }\n\n      style[property] = value;\n    });\n  }\n  /**\n   * Check if the given element has a special class.\n   * @param {Element} element - The element to check.\n   * @param {string} value - The class to search.\n   * @returns {boolean} Returns `true` if the special class was found.\n   */\n\n  function hasClass(element, value) {\n    return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;\n  }\n  /**\n   * Add classes to the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be added.\n   */\n\n  function addClass(element, value) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        addClass(elem, value);\n      });\n      return;\n    }\n\n    if (element.classList) {\n      element.classList.add(value);\n      return;\n    }\n\n    var className = element.className.trim();\n\n    if (!className) {\n      element.className = value;\n    } else if (className.indexOf(value) < 0) {\n      element.className = \"\".concat(className, \" \").concat(value);\n    }\n  }\n  /**\n   * Remove classes from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be removed.\n   */\n\n  function removeClass(element, value) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        removeClass(elem, value);\n      });\n      return;\n    }\n\n    if (element.classList) {\n      element.classList.remove(value);\n      return;\n    }\n\n    if (element.className.indexOf(value) >= 0) {\n      element.className = element.className.replace(value, '');\n    }\n  }\n  /**\n   * Add or remove classes from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} value - The classes to be toggled.\n   * @param {boolean} added - Add only.\n   */\n\n  function toggleClass(element, value, added) {\n    if (!value) {\n      return;\n    }\n\n    if (isNumber(element.length)) {\n      forEach(element, function (elem) {\n        toggleClass(elem, value, added);\n      });\n      return;\n    } // IE10-11 doesn't support the second parameter of `classList.toggle`\n\n\n    if (added) {\n      addClass(element, value);\n    } else {\n      removeClass(element, value);\n    }\n  }\n  var REGEXP_CAMEL_CASE = /([a-z\\d])([A-Z])/g;\n  /**\n   * Transform the given string from camelCase to kebab-case\n   * @param {string} value - The value to transform.\n   * @returns {string} The transformed value.\n   */\n\n  function toParamCase(value) {\n    return value.replace(REGEXP_CAMEL_CASE, '$1-$2').toLowerCase();\n  }\n  /**\n   * Get data from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to get.\n   * @returns {string} The data value.\n   */\n\n  function getData(element, name) {\n    if (isObject(element[name])) {\n      return element[name];\n    }\n\n    if (element.dataset) {\n      return element.dataset[name];\n    }\n\n    return element.getAttribute(\"data-\".concat(toParamCase(name)));\n  }\n  /**\n   * Set data to the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to set.\n   * @param {string} data - The data value.\n   */\n\n  function setData(element, name, data) {\n    if (isObject(data)) {\n      element[name] = data;\n    } else if (element.dataset) {\n      element.dataset[name] = data;\n    } else {\n      element.setAttribute(\"data-\".concat(toParamCase(name)), data);\n    }\n  }\n  /**\n   * Remove data from the given element.\n   * @param {Element} element - The target element.\n   * @param {string} name - The data key to remove.\n   */\n\n  function removeData(element, name) {\n    if (isObject(element[name])) {\n      try {\n        delete element[name];\n      } catch (error) {\n        element[name] = undefined;\n      }\n    } else if (element.dataset) {\n      // #128 Safari not allows to delete dataset property\n      try {\n        delete element.dataset[name];\n      } catch (error) {\n        element.dataset[name] = undefined;\n      }\n    } else {\n      element.removeAttribute(\"data-\".concat(toParamCase(name)));\n    }\n  }\n  var REGEXP_SPACES = /\\s\\s*/;\n\n  var onceSupported = function () {\n    var supported = false;\n\n    if (IS_BROWSER) {\n      var once = false;\n\n      var listener = function listener() {};\n\n      var options = Object.defineProperty({}, 'once', {\n        get: function get() {\n          supported = true;\n          return once;\n        },\n\n        /**\n         * This setter can fix a `TypeError` in strict mode\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}\n         * @param {boolean} value - The value to set\n         */\n        set: function set(value) {\n          once = value;\n        }\n      });\n      WINDOW.addEventListener('test', listener, options);\n      WINDOW.removeEventListener('test', listener, options);\n    }\n\n    return supported;\n  }();\n  /**\n   * Remove event listener from the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Function} listener - The event listener.\n   * @param {Object} options - The event options.\n   */\n\n\n  function removeListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var handler = listener;\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\n      if (!onceSupported) {\n        var listeners = element.listeners;\n\n        if (listeners && listeners[event] && listeners[event][listener]) {\n          handler = listeners[event][listener];\n          delete listeners[event][listener];\n\n          if (Object.keys(listeners[event]).length === 0) {\n            delete listeners[event];\n          }\n\n          if (Object.keys(listeners).length === 0) {\n            delete element.listeners;\n          }\n        }\n      }\n\n      element.removeEventListener(event, handler, options);\n    });\n  }\n  /**\n   * Add event listener to the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Function} listener - The event listener.\n   * @param {Object} options - The event options.\n   */\n\n  function addListener(element, type, listener) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var _handler = listener;\n    type.trim().split(REGEXP_SPACES).forEach(function (event) {\n      if (options.once && !onceSupported) {\n        var _element$listeners = element.listeners,\n            listeners = _element$listeners === void 0 ? {} : _element$listeners;\n\n        _handler = function handler() {\n          delete listeners[event][listener];\n          element.removeEventListener(event, _handler, options);\n\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          listener.apply(element, args);\n        };\n\n        if (!listeners[event]) {\n          listeners[event] = {};\n        }\n\n        if (listeners[event][listener]) {\n          element.removeEventListener(event, listeners[event][listener], options);\n        }\n\n        listeners[event][listener] = _handler;\n        element.listeners = listeners;\n      }\n\n      element.addEventListener(event, _handler, options);\n    });\n  }\n  /**\n   * Dispatch event on the target element.\n   * @param {Element} element - The event target.\n   * @param {string} type - The event type(s).\n   * @param {Object} data - The additional event data.\n   * @returns {boolean} Indicate if the event is default prevented or not.\n   */\n\n  function dispatchEvent(element, type, data) {\n    var event; // Event and CustomEvent on IE9-11 are global objects, not constructors\n\n    if (isFunction(Event) && isFunction(CustomEvent)) {\n      event = new CustomEvent(type, {\n        detail: data,\n        bubbles: true,\n        cancelable: true\n      });\n    } else {\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent(type, true, true, data);\n    }\n\n    return element.dispatchEvent(event);\n  }\n  /**\n   * Get the offset base on the document.\n   * @param {Element} element - The target element.\n   * @returns {Object} The offset data.\n   */\n\n  function getOffset(element) {\n    var box = element.getBoundingClientRect();\n    return {\n      left: box.left + (window.pageXOffset - document.documentElement.clientLeft),\n      top: box.top + (window.pageYOffset - document.documentElement.clientTop)\n    };\n  }\n  var location = WINDOW.location;\n  var REGEXP_ORIGINS = /^(\\w+:)\\/\\/([^:/?#]*):?(\\d*)/i;\n  /**\n   * Check if the given URL is a cross origin URL.\n   * @param {string} url - The target URL.\n   * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.\n   */\n\n  function isCrossOriginURL(url) {\n    var parts = url.match(REGEXP_ORIGINS);\n    return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n  }\n  /**\n   * Add timestamp to the given URL.\n   * @param {string} url - The target URL.\n   * @returns {string} The result URL.\n   */\n\n  function addTimestamp(url) {\n    var timestamp = \"timestamp=\".concat(new Date().getTime());\n    return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;\n  }\n  /**\n   * Get transforms base on the given object.\n   * @param {Object} obj - The target object.\n   * @returns {string} A string contains transform values.\n   */\n\n  function getTransforms(_ref) {\n    var rotate = _ref.rotate,\n        scaleX = _ref.scaleX,\n        scaleY = _ref.scaleY,\n        translateX = _ref.translateX,\n        translateY = _ref.translateY;\n    var values = [];\n\n    if (isNumber(translateX) && translateX !== 0) {\n      values.push(\"translateX(\".concat(translateX, \"px)\"));\n    }\n\n    if (isNumber(translateY) && translateY !== 0) {\n      values.push(\"translateY(\".concat(translateY, \"px)\"));\n    } // Rotate should come first before scale to match orientation transform\n\n\n    if (isNumber(rotate) && rotate !== 0) {\n      values.push(\"rotate(\".concat(rotate, \"deg)\"));\n    }\n\n    if (isNumber(scaleX) && scaleX !== 1) {\n      values.push(\"scaleX(\".concat(scaleX, \")\"));\n    }\n\n    if (isNumber(scaleY) && scaleY !== 1) {\n      values.push(\"scaleY(\".concat(scaleY, \")\"));\n    }\n\n    var transform = values.length ? values.join(' ') : 'none';\n    return {\n      WebkitTransform: transform,\n      msTransform: transform,\n      transform: transform\n    };\n  }\n  /**\n   * Get the max ratio of a group of pointers.\n   * @param {string} pointers - The target pointers.\n   * @returns {number} The result ratio.\n   */\n\n  function getMaxZoomRatio(pointers) {\n    var pointers2 = assign({}, pointers);\n    var ratios = [];\n    forEach(pointers, function (pointer, pointerId) {\n      delete pointers2[pointerId];\n      forEach(pointers2, function (pointer2) {\n        var x1 = Math.abs(pointer.startX - pointer2.startX);\n        var y1 = Math.abs(pointer.startY - pointer2.startY);\n        var x2 = Math.abs(pointer.endX - pointer2.endX);\n        var y2 = Math.abs(pointer.endY - pointer2.endY);\n        var z1 = Math.sqrt(x1 * x1 + y1 * y1);\n        var z2 = Math.sqrt(x2 * x2 + y2 * y2);\n        var ratio = (z2 - z1) / z1;\n        ratios.push(ratio);\n      });\n    });\n    ratios.sort(function (a, b) {\n      return Math.abs(a) < Math.abs(b);\n    });\n    return ratios[0];\n  }\n  /**\n   * Get a pointer from an event object.\n   * @param {Object} event - The target event object.\n   * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.\n   * @returns {Object} The result pointer contains start and/or end point coordinates.\n   */\n\n  function getPointer(_ref2, endOnly) {\n    var pageX = _ref2.pageX,\n        pageY = _ref2.pageY;\n    var end = {\n      endX: pageX,\n      endY: pageY\n    };\n    return endOnly ? end : assign({\n      startX: pageX,\n      startY: pageY\n    }, end);\n  }\n  /**\n   * Get the center point coordinate of a group of pointers.\n   * @param {Object} pointers - The target pointers.\n   * @returns {Object} The center point coordinate.\n   */\n\n  function getPointersCenter(pointers) {\n    var pageX = 0;\n    var pageY = 0;\n    var count = 0;\n    forEach(pointers, function (_ref3) {\n      var startX = _ref3.startX,\n          startY = _ref3.startY;\n      pageX += startX;\n      pageY += startY;\n      count += 1;\n    });\n    pageX /= count;\n    pageY /= count;\n    return {\n      pageX: pageX,\n      pageY: pageY\n    };\n  }\n  /**\n   * Get the max sizes in a rectangle under the given aspect ratio.\n   * @param {Object} data - The original sizes.\n   * @param {string} [type='contain'] - The adjust type.\n   * @returns {Object} The result sizes.\n   */\n\n  function getAdjustedSizes(_ref4) // or 'cover'\n  {\n    var aspectRatio = _ref4.aspectRatio,\n        height = _ref4.height,\n        width = _ref4.width;\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'contain';\n    var isValidWidth = isPositiveNumber(width);\n    var isValidHeight = isPositiveNumber(height);\n\n    if (isValidWidth && isValidHeight) {\n      var adjustedWidth = height * aspectRatio;\n\n      if (type === 'contain' && adjustedWidth > width || type === 'cover' && adjustedWidth < width) {\n        height = width / aspectRatio;\n      } else {\n        width = height * aspectRatio;\n      }\n    } else if (isValidWidth) {\n      height = width / aspectRatio;\n    } else if (isValidHeight) {\n      width = height * aspectRatio;\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  }\n  /**\n   * Get the new sizes of a rectangle after rotated.\n   * @param {Object} data - The original sizes.\n   * @returns {Object} The result sizes.\n   */\n\n  function getRotatedSizes(_ref5) {\n    var width = _ref5.width,\n        height = _ref5.height,\n        degree = _ref5.degree;\n    degree = Math.abs(degree) % 180;\n\n    if (degree === 90) {\n      return {\n        width: height,\n        height: width\n      };\n    }\n\n    var arc = degree % 90 * Math.PI / 180;\n    var sinArc = Math.sin(arc);\n    var cosArc = Math.cos(arc);\n    var newWidth = width * cosArc + height * sinArc;\n    var newHeight = width * sinArc + height * cosArc;\n    return degree > 90 ? {\n      width: newHeight,\n      height: newWidth\n    } : {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n  /**\n   * Get a canvas which drew the given image.\n   * @param {HTMLImageElement} image - The image for drawing.\n   * @param {Object} imageData - The image data.\n   * @param {Object} canvasData - The canvas data.\n   * @param {Object} options - The options.\n   * @returns {HTMLCanvasElement} The result canvas.\n   */\n\n  function getSourceCanvas(image, _ref6, _ref7, _ref8) {\n    var imageAspectRatio = _ref6.aspectRatio,\n        imageNaturalWidth = _ref6.naturalWidth,\n        imageNaturalHeight = _ref6.naturalHeight,\n        _ref6$rotate = _ref6.rotate,\n        rotate = _ref6$rotate === void 0 ? 0 : _ref6$rotate,\n        _ref6$scaleX = _ref6.scaleX,\n        scaleX = _ref6$scaleX === void 0 ? 1 : _ref6$scaleX,\n        _ref6$scaleY = _ref6.scaleY,\n        scaleY = _ref6$scaleY === void 0 ? 1 : _ref6$scaleY;\n    var aspectRatio = _ref7.aspectRatio,\n        naturalWidth = _ref7.naturalWidth,\n        naturalHeight = _ref7.naturalHeight;\n    var _ref8$fillColor = _ref8.fillColor,\n        fillColor = _ref8$fillColor === void 0 ? 'transparent' : _ref8$fillColor,\n        _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled,\n        imageSmoothingEnabled = _ref8$imageSmoothingE === void 0 ? true : _ref8$imageSmoothingE,\n        _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality,\n        imageSmoothingQuality = _ref8$imageSmoothingQ === void 0 ? 'low' : _ref8$imageSmoothingQ,\n        _ref8$maxWidth = _ref8.maxWidth,\n        maxWidth = _ref8$maxWidth === void 0 ? Infinity : _ref8$maxWidth,\n        _ref8$maxHeight = _ref8.maxHeight,\n        maxHeight = _ref8$maxHeight === void 0 ? Infinity : _ref8$maxHeight,\n        _ref8$minWidth = _ref8.minWidth,\n        minWidth = _ref8$minWidth === void 0 ? 0 : _ref8$minWidth,\n        _ref8$minHeight = _ref8.minHeight,\n        minHeight = _ref8$minHeight === void 0 ? 0 : _ref8$minHeight;\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    var maxSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: maxWidth,\n      height: maxHeight\n    });\n    var minSizes = getAdjustedSizes({\n      aspectRatio: aspectRatio,\n      width: minWidth,\n      height: minHeight\n    }, 'cover');\n    var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));\n    var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight)); // Note: should always use image's natural sizes for drawing as\n    // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90\n\n    var destMaxSizes = getAdjustedSizes({\n      aspectRatio: imageAspectRatio,\n      width: maxWidth,\n      height: maxHeight\n    });\n    var destMinSizes = getAdjustedSizes({\n      aspectRatio: imageAspectRatio,\n      width: minWidth,\n      height: minHeight\n    }, 'cover');\n    var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));\n    var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));\n    var params = [-destWidth / 2, -destHeight / 2, destWidth, destHeight];\n    canvas.width = normalizeDecimalNumber(width);\n    canvas.height = normalizeDecimalNumber(height);\n    context.fillStyle = fillColor;\n    context.fillRect(0, 0, width, height);\n    context.save();\n    context.translate(width / 2, height / 2);\n    context.rotate(rotate * Math.PI / 180);\n    context.scale(scaleX, scaleY);\n    context.imageSmoothingEnabled = imageSmoothingEnabled;\n    context.imageSmoothingQuality = imageSmoothingQuality;\n    context.drawImage.apply(context, [image].concat(_toConsumableArray(params.map(function (param) {\n      return Math.floor(normalizeDecimalNumber(param));\n    }))));\n    context.restore();\n    return canvas;\n  }\n  var fromCharCode = String.fromCharCode;\n  /**\n   * Get string from char code in data view.\n   * @param {DataView} dataView - The data view for read.\n   * @param {number} start - The start index.\n   * @param {number} length - The read length.\n   * @returns {string} The read result.\n   */\n\n  function getStringFromCharCode(dataView, start, length) {\n    var str = '';\n    length += start;\n\n    for (var i = start; i < length; i += 1) {\n      str += fromCharCode(dataView.getUint8(i));\n    }\n\n    return str;\n  }\n  var REGEXP_DATA_URL_HEAD = /^data:.*,/;\n  /**\n   * Transform Data URL to array buffer.\n   * @param {string} dataURL - The Data URL to transform.\n   * @returns {ArrayBuffer} The result array buffer.\n   */\n\n  function dataURLToArrayBuffer(dataURL) {\n    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n    var binary = atob(base64);\n    var arrayBuffer = new ArrayBuffer(binary.length);\n    var uint8 = new Uint8Array(arrayBuffer);\n    forEach(uint8, function (value, i) {\n      uint8[i] = binary.charCodeAt(i);\n    });\n    return arrayBuffer;\n  }\n  /**\n   * Transform array buffer to Data URL.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.\n   * @param {string} mimeType - The mime type of the Data URL.\n   * @returns {string} The result Data URL.\n   */\n\n  function arrayBufferToDataURL(arrayBuffer, mimeType) {\n    var chunks = []; // Chunk Typed Array for better performance (#435)\n\n    var chunkSize = 8192;\n    var uint8 = new Uint8Array(arrayBuffer);\n\n    while (uint8.length > 0) {\n      // XXX: Babel's `toConsumableArray` helper will throw error in IE or Safari 9\n      // eslint-disable-next-line prefer-spread\n      chunks.push(fromCharCode.apply(null, toArray(uint8.subarray(0, chunkSize))));\n      uint8 = uint8.subarray(chunkSize);\n    }\n\n    return \"data:\".concat(mimeType, \";base64,\").concat(btoa(chunks.join('')));\n  }\n  /**\n   * Get orientation value from given array buffer.\n   * @param {ArrayBuffer} arrayBuffer - The array buffer to read.\n   * @returns {number} The read orientation value.\n   */\n\n  function resetAndGetOrientation(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    var orientation; // Ignores range error when the image does not have correct Exif information\n\n    try {\n      var littleEndian;\n      var app1Start;\n      var ifdStart; // Only handle JPEG image (start by 0xFFD8)\n\n      if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n        var length = dataView.byteLength;\n        var offset = 2;\n\n        while (offset + 1 < length) {\n          if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n            app1Start = offset;\n            break;\n          }\n\n          offset += 1;\n        }\n      }\n\n      if (app1Start) {\n        var exifIDCode = app1Start + 4;\n        var tiffOffset = app1Start + 10;\n\n        if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n          var endianness = dataView.getUint16(tiffOffset);\n          littleEndian = endianness === 0x4949;\n\n          if (littleEndian || endianness === 0x4D4D\n          /* bigEndian */\n          ) {\n              if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n                var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n                if (firstIFDOffset >= 0x00000008) {\n                  ifdStart = tiffOffset + firstIFDOffset;\n                }\n              }\n            }\n        }\n      }\n\n      if (ifdStart) {\n        var _length = dataView.getUint16(ifdStart, littleEndian);\n\n        var _offset;\n\n        var i;\n\n        for (i = 0; i < _length; i += 1) {\n          _offset = ifdStart + i * 12 + 2;\n\n          if (dataView.getUint16(_offset, littleEndian) === 0x0112\n          /* Orientation */\n          ) {\n              // 8 is the offset of the current tag's value\n              _offset += 8; // Get the original orientation value\n\n              orientation = dataView.getUint16(_offset, littleEndian); // Override the orientation with its default value\n\n              dataView.setUint16(_offset, 1, littleEndian);\n              break;\n            }\n        }\n      }\n    } catch (error) {\n      orientation = 1;\n    }\n\n    return orientation;\n  }\n  /**\n   * Parse Exif Orientation value.\n   * @param {number} orientation - The orientation to parse.\n   * @returns {Object} The parsed result.\n   */\n\n  function parseOrientation(orientation) {\n    var rotate = 0;\n    var scaleX = 1;\n    var scaleY = 1;\n\n    switch (orientation) {\n      // Flip horizontal\n      case 2:\n        scaleX = -1;\n        break;\n      // Rotate left 180°\n\n      case 3:\n        rotate = -180;\n        break;\n      // Flip vertical\n\n      case 4:\n        scaleY = -1;\n        break;\n      // Flip vertical and rotate right 90°\n\n      case 5:\n        rotate = 90;\n        scaleY = -1;\n        break;\n      // Rotate right 90°\n\n      case 6:\n        rotate = 90;\n        break;\n      // Flip horizontal and rotate right 90°\n\n      case 7:\n        rotate = 90;\n        scaleX = -1;\n        break;\n      // Rotate left 90°\n\n      case 8:\n        rotate = -90;\n        break;\n\n      default:\n    }\n\n    return {\n      rotate: rotate,\n      scaleX: scaleX,\n      scaleY: scaleY\n    };\n  }\n\n  var render = {\n    render: function render() {\n      this.initContainer();\n      this.initCanvas();\n      this.initCropBox();\n      this.renderCanvas();\n\n      if (this.cropped) {\n        this.renderCropBox();\n      }\n    },\n    initContainer: function initContainer() {\n      var element = this.element,\n          options = this.options,\n          container = this.container,\n          cropper = this.cropper;\n      addClass(cropper, CLASS_HIDDEN);\n      removeClass(element, CLASS_HIDDEN);\n      var containerData = {\n        width: Math.max(container.offsetWidth, Number(options.minContainerWidth) || 200),\n        height: Math.max(container.offsetHeight, Number(options.minContainerHeight) || 100)\n      };\n      this.containerData = containerData;\n      setStyle(cropper, {\n        width: containerData.width,\n        height: containerData.height\n      });\n      addClass(element, CLASS_HIDDEN);\n      removeClass(cropper, CLASS_HIDDEN);\n    },\n    // Canvas (image wrapper)\n    initCanvas: function initCanvas() {\n      var containerData = this.containerData,\n          imageData = this.imageData;\n      var viewMode = this.options.viewMode;\n      var rotated = Math.abs(imageData.rotate) % 180 === 90;\n      var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;\n      var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;\n      var aspectRatio = naturalWidth / naturalHeight;\n      var canvasWidth = containerData.width;\n      var canvasHeight = containerData.height;\n\n      if (containerData.height * aspectRatio > containerData.width) {\n        if (viewMode === 3) {\n          canvasWidth = containerData.height * aspectRatio;\n        } else {\n          canvasHeight = containerData.width / aspectRatio;\n        }\n      } else if (viewMode === 3) {\n        canvasHeight = containerData.width / aspectRatio;\n      } else {\n        canvasWidth = containerData.height * aspectRatio;\n      }\n\n      var canvasData = {\n        aspectRatio: aspectRatio,\n        naturalWidth: naturalWidth,\n        naturalHeight: naturalHeight,\n        width: canvasWidth,\n        height: canvasHeight\n      };\n      canvasData.left = (containerData.width - canvasWidth) / 2;\n      canvasData.top = (containerData.height - canvasHeight) / 2;\n      canvasData.oldLeft = canvasData.left;\n      canvasData.oldTop = canvasData.top;\n      this.canvasData = canvasData;\n      this.limited = viewMode === 1 || viewMode === 2;\n      this.limitCanvas(true, true);\n      this.initialImageData = assign({}, imageData);\n      this.initialCanvasData = assign({}, canvasData);\n    },\n    limitCanvas: function limitCanvas(sizeLimited, positionLimited) {\n      var options = this.options,\n          containerData = this.containerData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var viewMode = options.viewMode;\n      var aspectRatio = canvasData.aspectRatio;\n      var cropped = this.cropped && cropBoxData;\n\n      if (sizeLimited) {\n        var minCanvasWidth = Number(options.minCanvasWidth) || 0;\n        var minCanvasHeight = Number(options.minCanvasHeight) || 0;\n\n        if (viewMode > 1) {\n          minCanvasWidth = Math.max(minCanvasWidth, containerData.width);\n          minCanvasHeight = Math.max(minCanvasHeight, containerData.height);\n\n          if (viewMode === 3) {\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        } else if (viewMode > 0) {\n          if (minCanvasWidth) {\n            minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);\n          } else if (minCanvasHeight) {\n            minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);\n          } else if (cropped) {\n            minCanvasWidth = cropBoxData.width;\n            minCanvasHeight = cropBoxData.height;\n\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          }\n        }\n\n        var _getAdjustedSizes = getAdjustedSizes({\n          aspectRatio: aspectRatio,\n          width: minCanvasWidth,\n          height: minCanvasHeight\n        });\n\n        minCanvasWidth = _getAdjustedSizes.width;\n        minCanvasHeight = _getAdjustedSizes.height;\n        canvasData.minWidth = minCanvasWidth;\n        canvasData.minHeight = minCanvasHeight;\n        canvasData.maxWidth = Infinity;\n        canvasData.maxHeight = Infinity;\n      }\n\n      if (positionLimited) {\n        if (viewMode > (cropped ? 0 : 1)) {\n          var newCanvasLeft = containerData.width - canvasData.width;\n          var newCanvasTop = containerData.height - canvasData.height;\n          canvasData.minLeft = Math.min(0, newCanvasLeft);\n          canvasData.minTop = Math.min(0, newCanvasTop);\n          canvasData.maxLeft = Math.max(0, newCanvasLeft);\n          canvasData.maxTop = Math.max(0, newCanvasTop);\n\n          if (cropped && this.limited) {\n            canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));\n            canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));\n            canvasData.maxLeft = cropBoxData.left;\n            canvasData.maxTop = cropBoxData.top;\n\n            if (viewMode === 2) {\n              if (canvasData.width >= containerData.width) {\n                canvasData.minLeft = Math.min(0, newCanvasLeft);\n                canvasData.maxLeft = Math.max(0, newCanvasLeft);\n              }\n\n              if (canvasData.height >= containerData.height) {\n                canvasData.minTop = Math.min(0, newCanvasTop);\n                canvasData.maxTop = Math.max(0, newCanvasTop);\n              }\n            }\n          }\n        } else {\n          canvasData.minLeft = -canvasData.width;\n          canvasData.minTop = -canvasData.height;\n          canvasData.maxLeft = containerData.width;\n          canvasData.maxTop = containerData.height;\n        }\n      }\n    },\n    renderCanvas: function renderCanvas(changed, transformed) {\n      var canvasData = this.canvasData,\n          imageData = this.imageData;\n\n      if (transformed) {\n        var _getRotatedSizes = getRotatedSizes({\n          width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),\n          height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),\n          degree: imageData.rotate || 0\n        }),\n            naturalWidth = _getRotatedSizes.width,\n            naturalHeight = _getRotatedSizes.height;\n\n        var width = canvasData.width * (naturalWidth / canvasData.naturalWidth);\n        var height = canvasData.height * (naturalHeight / canvasData.naturalHeight);\n        canvasData.left -= (width - canvasData.width) / 2;\n        canvasData.top -= (height - canvasData.height) / 2;\n        canvasData.width = width;\n        canvasData.height = height;\n        canvasData.aspectRatio = naturalWidth / naturalHeight;\n        canvasData.naturalWidth = naturalWidth;\n        canvasData.naturalHeight = naturalHeight;\n        this.limitCanvas(true, false);\n      }\n\n      if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {\n        canvasData.left = canvasData.oldLeft;\n      }\n\n      if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {\n        canvasData.top = canvasData.oldTop;\n      }\n\n      canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);\n      canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);\n      this.limitCanvas(false, true);\n      canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);\n      canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);\n      canvasData.oldLeft = canvasData.left;\n      canvasData.oldTop = canvasData.top;\n      setStyle(this.canvas, assign({\n        width: canvasData.width,\n        height: canvasData.height\n      }, getTransforms({\n        translateX: canvasData.left,\n        translateY: canvasData.top\n      })));\n      this.renderImage(changed);\n\n      if (this.cropped && this.limited) {\n        this.limitCropBox(true, true);\n      }\n    },\n    renderImage: function renderImage(changed) {\n      var canvasData = this.canvasData,\n          imageData = this.imageData;\n      var width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);\n      var height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);\n      assign(imageData, {\n        width: width,\n        height: height,\n        left: (canvasData.width - width) / 2,\n        top: (canvasData.height - height) / 2\n      });\n      setStyle(this.image, assign({\n        width: imageData.width,\n        height: imageData.height\n      }, getTransforms(assign({\n        translateX: imageData.left,\n        translateY: imageData.top\n      }, imageData))));\n\n      if (changed) {\n        this.output();\n      }\n    },\n    initCropBox: function initCropBox() {\n      var options = this.options,\n          canvasData = this.canvasData;\n      var aspectRatio = options.aspectRatio || options.initialAspectRatio;\n      var autoCropArea = Number(options.autoCropArea) || 0.8;\n      var cropBoxData = {\n        width: canvasData.width,\n        height: canvasData.height\n      };\n\n      if (aspectRatio) {\n        if (canvasData.height * aspectRatio > canvasData.width) {\n          cropBoxData.height = cropBoxData.width / aspectRatio;\n        } else {\n          cropBoxData.width = cropBoxData.height * aspectRatio;\n        }\n      }\n\n      this.cropBoxData = cropBoxData;\n      this.limitCropBox(true, true); // Initialize auto crop area\n\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight); // The width/height of auto crop area must large than \"minWidth/Height\"\n\n      cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);\n      cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);\n      cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;\n      cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;\n      cropBoxData.oldLeft = cropBoxData.left;\n      cropBoxData.oldTop = cropBoxData.top;\n      this.initialCropBoxData = assign({}, cropBoxData);\n    },\n    limitCropBox: function limitCropBox(sizeLimited, positionLimited) {\n      var options = this.options,\n          containerData = this.containerData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData,\n          limited = this.limited;\n      var aspectRatio = options.aspectRatio;\n\n      if (sizeLimited) {\n        var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;\n        var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;\n        var maxCropBoxWidth = limited ? Math.min(containerData.width, canvasData.width, canvasData.width + canvasData.left, containerData.width - canvasData.left) : containerData.width;\n        var maxCropBoxHeight = limited ? Math.min(containerData.height, canvasData.height, canvasData.height + canvasData.top, containerData.height - canvasData.top) : containerData.height; // The min/maxCropBoxWidth/Height must be less than container's width/height\n\n        minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);\n        minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);\n\n        if (aspectRatio) {\n          if (minCropBoxWidth && minCropBoxHeight) {\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\n            } else {\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\n            }\n          } else if (minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else if (minCropBoxHeight) {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n          } else {\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n          }\n        } // The minWidth/Height must be less than maxWidth/Height\n\n\n        cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);\n        cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);\n        cropBoxData.maxWidth = maxCropBoxWidth;\n        cropBoxData.maxHeight = maxCropBoxHeight;\n      }\n\n      if (positionLimited) {\n        if (limited) {\n          cropBoxData.minLeft = Math.max(0, canvasData.left);\n          cropBoxData.minTop = Math.max(0, canvasData.top);\n          cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;\n          cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;\n        } else {\n          cropBoxData.minLeft = 0;\n          cropBoxData.minTop = 0;\n          cropBoxData.maxLeft = containerData.width - cropBoxData.width;\n          cropBoxData.maxTop = containerData.height - cropBoxData.height;\n        }\n      }\n    },\n    renderCropBox: function renderCropBox() {\n      var options = this.options,\n          containerData = this.containerData,\n          cropBoxData = this.cropBoxData;\n\n      if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {\n        cropBoxData.left = cropBoxData.oldLeft;\n      }\n\n      if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {\n        cropBoxData.top = cropBoxData.oldTop;\n      }\n\n      cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);\n      cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);\n      this.limitCropBox(false, true);\n      cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);\n      cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);\n      cropBoxData.oldLeft = cropBoxData.left;\n      cropBoxData.oldTop = cropBoxData.top;\n\n      if (options.movable && options.cropBoxMovable) {\n        // Turn to move the canvas when the crop box is equal to the container\n        setData(this.face, DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? ACTION_MOVE : ACTION_ALL);\n      }\n\n      setStyle(this.cropBox, assign({\n        width: cropBoxData.width,\n        height: cropBoxData.height\n      }, getTransforms({\n        translateX: cropBoxData.left,\n        translateY: cropBoxData.top\n      })));\n\n      if (this.cropped && this.limited) {\n        this.limitCanvas(true, true);\n      }\n\n      if (!this.disabled) {\n        this.output();\n      }\n    },\n    output: function output() {\n      this.preview();\n      dispatchEvent(this.element, EVENT_CROP, this.getData());\n    }\n  };\n\n  var preview = {\n    initPreview: function initPreview() {\n      var crossOrigin = this.crossOrigin;\n      var preview = this.options.preview;\n      var url = crossOrigin ? this.crossOriginUrl : this.url;\n      var image = document.createElement('img');\n\n      if (crossOrigin) {\n        image.crossOrigin = crossOrigin;\n      }\n\n      image.src = url;\n      this.viewBox.appendChild(image);\n      this.viewBoxImage = image;\n\n      if (!preview) {\n        return;\n      }\n\n      var previews = preview;\n\n      if (typeof preview === 'string') {\n        previews = this.element.ownerDocument.querySelectorAll(preview);\n      } else if (preview.querySelector) {\n        previews = [preview];\n      }\n\n      this.previews = previews;\n      forEach(previews, function (el) {\n        var img = document.createElement('img'); // Save the original size for recover\n\n        setData(el, DATA_PREVIEW, {\n          width: el.offsetWidth,\n          height: el.offsetHeight,\n          html: el.innerHTML\n        });\n\n        if (crossOrigin) {\n          img.crossOrigin = crossOrigin;\n        }\n\n        img.src = url;\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * Add `height:auto` to override `height` attribute on IE8\n         * (Occur only when margin-top <= -height)\n         */\n\n        img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;\"';\n        el.innerHTML = '';\n        el.appendChild(img);\n      });\n    },\n    resetPreview: function resetPreview() {\n      forEach(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        setStyle(element, {\n          width: data.width,\n          height: data.height\n        });\n        element.innerHTML = data.html;\n        removeData(element, DATA_PREVIEW);\n      });\n    },\n    preview: function preview() {\n      var imageData = this.imageData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var cropBoxWidth = cropBoxData.width,\n          cropBoxHeight = cropBoxData.height;\n      var width = imageData.width,\n          height = imageData.height;\n      var left = cropBoxData.left - canvasData.left - imageData.left;\n      var top = cropBoxData.top - canvasData.top - imageData.top;\n\n      if (!this.cropped || this.disabled) {\n        return;\n      }\n\n      setStyle(this.viewBoxImage, assign({\n        width: width,\n        height: height\n      }, getTransforms(assign({\n        translateX: -left,\n        translateY: -top\n      }, imageData))));\n      forEach(this.previews, function (element) {\n        var data = getData(element, DATA_PREVIEW);\n        var originalWidth = data.width;\n        var originalHeight = data.height;\n        var newWidth = originalWidth;\n        var newHeight = originalHeight;\n        var ratio = 1;\n\n        if (cropBoxWidth) {\n          ratio = originalWidth / cropBoxWidth;\n          newHeight = cropBoxHeight * ratio;\n        }\n\n        if (cropBoxHeight && newHeight > originalHeight) {\n          ratio = originalHeight / cropBoxHeight;\n          newWidth = cropBoxWidth * ratio;\n          newHeight = originalHeight;\n        }\n\n        setStyle(element, {\n          width: newWidth,\n          height: newHeight\n        });\n        setStyle(element.getElementsByTagName('img')[0], assign({\n          width: width * ratio,\n          height: height * ratio\n        }, getTransforms(assign({\n          translateX: -left * ratio,\n          translateY: -top * ratio\n        }, imageData))));\n      });\n    }\n  };\n\n  var events = {\n    bind: function bind() {\n      var element = this.element,\n          options = this.options,\n          cropper = this.cropper;\n\n      if (isFunction(options.cropstart)) {\n        addListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        addListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        addListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        addListener(element, EVENT_CROP, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        addListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      addListener(cropper, EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));\n\n      if (options.zoomable && options.zoomOnWheel) {\n        addListener(cropper, EVENT_WHEEL, this.onWheel = this.wheel.bind(this), {\n          passive: false,\n          capture: true\n        });\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        addListener(cropper, EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));\n      }\n\n      addListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));\n      addListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));\n\n      if (options.responsive) {\n        addListener(window, EVENT_RESIZE, this.onResize = this.resize.bind(this));\n      }\n    },\n    unbind: function unbind() {\n      var element = this.element,\n          options = this.options,\n          cropper = this.cropper;\n\n      if (isFunction(options.cropstart)) {\n        removeListener(element, EVENT_CROP_START, options.cropstart);\n      }\n\n      if (isFunction(options.cropmove)) {\n        removeListener(element, EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if (isFunction(options.cropend)) {\n        removeListener(element, EVENT_CROP_END, options.cropend);\n      }\n\n      if (isFunction(options.crop)) {\n        removeListener(element, EVENT_CROP, options.crop);\n      }\n\n      if (isFunction(options.zoom)) {\n        removeListener(element, EVENT_ZOOM, options.zoom);\n      }\n\n      removeListener(cropper, EVENT_POINTER_DOWN, this.onCropStart);\n\n      if (options.zoomable && options.zoomOnWheel) {\n        removeListener(cropper, EVENT_WHEEL, this.onWheel, {\n          passive: false,\n          capture: true\n        });\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        removeListener(cropper, EVENT_DBLCLICK, this.onDblclick);\n      }\n\n      removeListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove);\n      removeListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd);\n\n      if (options.responsive) {\n        removeListener(window, EVENT_RESIZE, this.onResize);\n      }\n    }\n  };\n\n  var handlers = {\n    resize: function resize() {\n      var options = this.options,\n          container = this.container,\n          containerData = this.containerData;\n      var minContainerWidth = Number(options.minContainerWidth) || MIN_CONTAINER_WIDTH;\n      var minContainerHeight = Number(options.minContainerHeight) || MIN_CONTAINER_HEIGHT;\n\n      if (this.disabled || containerData.width <= minContainerWidth || containerData.height <= minContainerHeight) {\n        return;\n      }\n\n      var ratio = container.offsetWidth / containerData.width; // Resize when width changed or height changed\n\n      if (ratio !== 1 || container.offsetHeight !== containerData.height) {\n        var canvasData;\n        var cropBoxData;\n\n        if (options.restore) {\n          canvasData = this.getCanvasData();\n          cropBoxData = this.getCropBoxData();\n        }\n\n        this.render();\n\n        if (options.restore) {\n          this.setCanvasData(forEach(canvasData, function (n, i) {\n            canvasData[i] = n * ratio;\n          }));\n          this.setCropBoxData(forEach(cropBoxData, function (n, i) {\n            cropBoxData[i] = n * ratio;\n          }));\n        }\n      }\n    },\n    dblclick: function dblclick() {\n      if (this.disabled || this.options.dragMode === DRAG_MODE_NONE) {\n        return;\n      }\n\n      this.setDragMode(hasClass(this.dragBox, CLASS_CROP) ? DRAG_MODE_MOVE : DRAG_MODE_CROP);\n    },\n    wheel: function wheel(event) {\n      var _this = this;\n\n      var ratio = Number(this.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n\n      if (this.disabled) {\n        return;\n      }\n\n      event.preventDefault(); // Limit wheel speed to prevent zoom too fast (#21)\n\n      if (this.wheeling) {\n        return;\n      }\n\n      this.wheeling = true;\n      setTimeout(function () {\n        _this.wheeling = false;\n      }, 50);\n\n      if (event.deltaY) {\n        delta = event.deltaY > 0 ? 1 : -1;\n      } else if (event.wheelDelta) {\n        delta = -event.wheelDelta / 120;\n      } else if (event.detail) {\n        delta = event.detail > 0 ? 1 : -1;\n      }\n\n      this.zoom(-delta * ratio, event);\n    },\n    cropStart: function cropStart(event) {\n      var buttons = event.buttons,\n          button = event.button;\n\n      if (this.disabled // No primary button (Usually the left button)\n      // Note that touch events have no `buttons` or `button` property\n      || isNumber(buttons) && buttons !== 1 || isNumber(button) && button !== 0 // Open context menu\n      || event.ctrlKey) {\n        return;\n      }\n\n      var options = this.options,\n          pointers = this.pointers;\n      var action;\n\n      if (event.changedTouches) {\n        // Handle touch event\n        forEach(event.changedTouches, function (touch) {\n          pointers[touch.identifier] = getPointer(touch);\n        });\n      } else {\n        // Handle mouse event and pointer event\n        pointers[event.pointerId || 0] = getPointer(event);\n      }\n\n      if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {\n        action = ACTION_ZOOM;\n      } else {\n        action = getData(event.target, DATA_ACTION);\n      }\n\n      if (!REGEXP_ACTIONS.test(action)) {\n        return;\n      }\n\n      if (dispatchEvent(this.element, EVENT_CROP_START, {\n        originalEvent: event,\n        action: action\n      }) === false) {\n        return;\n      } // This line is required for preventing page zooming in iOS browsers\n\n\n      event.preventDefault();\n      this.action = action;\n      this.cropping = false;\n\n      if (action === ACTION_CROP) {\n        this.cropping = true;\n        addClass(this.dragBox, CLASS_MODAL);\n      }\n    },\n    cropMove: function cropMove(event) {\n      var action = this.action;\n\n      if (this.disabled || !action) {\n        return;\n      }\n\n      var pointers = this.pointers;\n      event.preventDefault();\n\n      if (dispatchEvent(this.element, EVENT_CROP_MOVE, {\n        originalEvent: event,\n        action: action\n      }) === false) {\n        return;\n      }\n\n      if (event.changedTouches) {\n        forEach(event.changedTouches, function (touch) {\n          // The first parameter should not be undefined (#432)\n          assign(pointers[touch.identifier] || {}, getPointer(touch, true));\n        });\n      } else {\n        assign(pointers[event.pointerId || 0] || {}, getPointer(event, true));\n      }\n\n      this.change(event);\n    },\n    cropEnd: function cropEnd(event) {\n      if (this.disabled) {\n        return;\n      }\n\n      var action = this.action,\n          pointers = this.pointers;\n\n      if (event.changedTouches) {\n        forEach(event.changedTouches, function (touch) {\n          delete pointers[touch.identifier];\n        });\n      } else {\n        delete pointers[event.pointerId || 0];\n      }\n\n      if (!action) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if (!Object.keys(pointers).length) {\n        this.action = '';\n      }\n\n      if (this.cropping) {\n        this.cropping = false;\n        toggleClass(this.dragBox, CLASS_MODAL, this.cropped && this.options.modal);\n      }\n\n      dispatchEvent(this.element, EVENT_CROP_END, {\n        originalEvent: event,\n        action: action\n      });\n    }\n  };\n\n  var change = {\n    change: function change(event) {\n      var options = this.options,\n          canvasData = this.canvasData,\n          containerData = this.containerData,\n          cropBoxData = this.cropBoxData,\n          pointers = this.pointers;\n      var action = this.action;\n      var aspectRatio = options.aspectRatio;\n      var left = cropBoxData.left,\n          top = cropBoxData.top,\n          width = cropBoxData.width,\n          height = cropBoxData.height;\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = containerData.width;\n      var maxHeight = containerData.height;\n      var renderable = true;\n      var offset; // Locking aspect ratio in \"free mode\" by holding shift key\n\n      if (!aspectRatio && event.shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n\n      if (this.limited) {\n        minLeft = cropBoxData.minLeft;\n        minTop = cropBoxData.minTop;\n        maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);\n        maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);\n      }\n\n      var pointer = pointers[Object.keys(pointers)[0]];\n      var range = {\n        x: pointer.endX - pointer.startX,\n        y: pointer.endY - pointer.startY\n      };\n\n      var check = function check(side) {\n        switch (side) {\n          case ACTION_EAST:\n            if (right + range.x > maxWidth) {\n              range.x = maxWidth - right;\n            }\n\n            break;\n\n          case ACTION_WEST:\n            if (left + range.x < minLeft) {\n              range.x = minLeft - left;\n            }\n\n            break;\n\n          case ACTION_NORTH:\n            if (top + range.y < minTop) {\n              range.y = minTop - top;\n            }\n\n            break;\n\n          case ACTION_SOUTH:\n            if (bottom + range.y > maxHeight) {\n              range.y = maxHeight - bottom;\n            }\n\n            break;\n\n          default:\n        }\n      };\n\n      switch (action) {\n        // Move crop box\n        case ACTION_ALL:\n          left += range.x;\n          top += range.y;\n          break;\n        // Resize crop box\n\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_EAST);\n          width += range.x;\n\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = -width;\n            left -= width;\n          }\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += (cropBoxData.height - height) / 2;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_NORTH);\n          height -= range.y;\n          top += range.y;\n\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = -height;\n            top -= height;\n          }\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += (cropBoxData.width - width) / 2;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_WEST);\n          width -= range.x;\n          left += range.x;\n\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = -width;\n            left -= width;\n          }\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += (cropBoxData.height - height) / 2;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n            renderable = false;\n            break;\n          }\n\n          check(ACTION_SOUTH);\n          height += range.y;\n\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = -height;\n            top -= height;\n          }\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += (cropBoxData.width - width) / 2;\n          }\n\n          break;\n\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_NORTH);\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            check(ACTION_NORTH);\n            check(ACTION_EAST);\n\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_NORTH);\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += cropBoxData.width - width;\n          } else {\n            check(ACTION_NORTH);\n            check(ACTION_WEST);\n\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_WEST);\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            check(ACTION_SOUTH);\n            check(ACTION_WEST);\n\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            check(ACTION_EAST);\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            check(ACTION_SOUTH);\n            check(ACTION_EAST);\n\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = -height;\n            width = -width;\n            top -= height;\n            left -= width;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = -width;\n            left -= width;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = -height;\n            top -= height;\n          }\n\n          break;\n        // Move canvas\n\n        case ACTION_MOVE:\n          this.move(range.x, range.y);\n          renderable = false;\n          break;\n        // Zoom canvas\n\n        case ACTION_ZOOM:\n          this.zoom(getMaxZoomRatio(pointers), event);\n          renderable = false;\n          break;\n        // Create crop box\n\n        case ACTION_CROP:\n          if (!range.x || !range.y) {\n            renderable = false;\n            break;\n          }\n\n          offset = getOffset(this.cropper);\n          left = pointer.startX - offset.left;\n          top = pointer.startY - offset.top;\n          width = cropBoxData.minWidth;\n          height = cropBoxData.minHeight;\n\n          if (range.x > 0) {\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n          } else if (range.x < 0) {\n            left -= width;\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n          }\n\n          if (range.y < 0) {\n            top -= height;\n          } // Show the crop box if is hidden\n\n\n          if (!this.cropped) {\n            removeClass(this.cropBox, CLASS_HIDDEN);\n            this.cropped = true;\n\n            if (this.limited) {\n              this.limitCropBox(true, true);\n            }\n          }\n\n          break;\n\n        default:\n      }\n\n      if (renderable) {\n        cropBoxData.width = width;\n        cropBoxData.height = height;\n        cropBoxData.left = left;\n        cropBoxData.top = top;\n        this.action = action;\n        this.renderCropBox();\n      } // Override\n\n\n      forEach(pointers, function (p) {\n        p.startX = p.endX;\n        p.startY = p.endY;\n      });\n    }\n  };\n\n  var methods = {\n    // Show the crop box manually\n    crop: function crop() {\n      if (this.ready && !this.cropped && !this.disabled) {\n        this.cropped = true;\n        this.limitCropBox(true, true);\n\n        if (this.options.modal) {\n          addClass(this.dragBox, CLASS_MODAL);\n        }\n\n        removeClass(this.cropBox, CLASS_HIDDEN);\n        this.setCropBoxData(this.initialCropBoxData);\n      }\n\n      return this;\n    },\n    // Reset the image and crop box to their initial states\n    reset: function reset() {\n      if (this.ready && !this.disabled) {\n        this.imageData = assign({}, this.initialImageData);\n        this.canvasData = assign({}, this.initialCanvasData);\n        this.cropBoxData = assign({}, this.initialCropBoxData);\n        this.renderCanvas();\n\n        if (this.cropped) {\n          this.renderCropBox();\n        }\n      }\n\n      return this;\n    },\n    // Clear the crop box\n    clear: function clear() {\n      if (this.cropped && !this.disabled) {\n        assign(this.cropBoxData, {\n          left: 0,\n          top: 0,\n          width: 0,\n          height: 0\n        });\n        this.cropped = false;\n        this.renderCropBox();\n        this.limitCanvas(true, true); // Render canvas after crop box rendered\n\n        this.renderCanvas();\n        removeClass(this.dragBox, CLASS_MODAL);\n        addClass(this.cropBox, CLASS_HIDDEN);\n      }\n\n      return this;\n    },\n\n    /**\n     * Replace the image's src and rebuild the cropper\n     * @param {string} url - The new URL.\n     * @param {boolean} [hasSameSize] - Indicate if the new image has the same size as the old one.\n     * @returns {Cropper} this\n     */\n    replace: function replace(url) {\n      var hasSameSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!this.disabled && url) {\n        if (this.isImg) {\n          this.element.src = url;\n        }\n\n        if (hasSameSize) {\n          this.url = url;\n          this.image.src = url;\n\n          if (this.ready) {\n            this.viewBoxImage.src = url;\n            forEach(this.previews, function (element) {\n              element.getElementsByTagName('img')[0].src = url;\n            });\n          }\n        } else {\n          if (this.isImg) {\n            this.replaced = true;\n          }\n\n          this.options.data = null;\n          this.uncreate();\n          this.load(url);\n        }\n      }\n\n      return this;\n    },\n    // Enable (unfreeze) the cropper\n    enable: function enable() {\n      if (this.ready && this.disabled) {\n        this.disabled = false;\n        removeClass(this.cropper, CLASS_DISABLED);\n      }\n\n      return this;\n    },\n    // Disable (freeze) the cropper\n    disable: function disable() {\n      if (this.ready && !this.disabled) {\n        this.disabled = true;\n        addClass(this.cropper, CLASS_DISABLED);\n      }\n\n      return this;\n    },\n\n    /**\n     * Destroy the cropper and remove the instance from the image\n     * @returns {Cropper} this\n     */\n    destroy: function destroy() {\n      var element = this.element;\n\n      if (!element[NAMESPACE]) {\n        return this;\n      }\n\n      element[NAMESPACE] = undefined;\n\n      if (this.isImg && this.replaced) {\n        element.src = this.originalUrl;\n      }\n\n      this.uncreate();\n      return this;\n    },\n\n    /**\n     * Move the canvas with relative offsets\n     * @param {number} offsetX - The relative offset distance on the x-axis.\n     * @param {number} [offsetY=offsetX] - The relative offset distance on the y-axis.\n     * @returns {Cropper} this\n     */\n    move: function move(offsetX) {\n      var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetX;\n      var _this$canvasData = this.canvasData,\n          left = _this$canvasData.left,\n          top = _this$canvasData.top;\n      return this.moveTo(isUndefined(offsetX) ? offsetX : left + Number(offsetX), isUndefined(offsetY) ? offsetY : top + Number(offsetY));\n    },\n\n    /**\n     * Move the canvas to an absolute point\n     * @param {number} x - The x-axis coordinate.\n     * @param {number} [y=x] - The y-axis coordinate.\n     * @returns {Cropper} this\n     */\n    moveTo: function moveTo(x) {\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;\n      var canvasData = this.canvasData;\n      var changed = false;\n      x = Number(x);\n      y = Number(y);\n\n      if (this.ready && !this.disabled && this.options.movable) {\n        if (isNumber(x)) {\n          canvasData.left = x;\n          changed = true;\n        }\n\n        if (isNumber(y)) {\n          canvasData.top = y;\n          changed = true;\n        }\n\n        if (changed) {\n          this.renderCanvas(true);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Zoom the canvas with a relative ratio\n     * @param {number} ratio - The target ratio.\n     * @param {Event} _originalEvent - The original event if any.\n     * @returns {Cropper} this\n     */\n    zoom: function zoom(ratio, _originalEvent) {\n      var canvasData = this.canvasData;\n      ratio = Number(ratio);\n\n      if (ratio < 0) {\n        ratio = 1 / (1 - ratio);\n      } else {\n        ratio = 1 + ratio;\n      }\n\n      return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);\n    },\n\n    /**\n     * Zoom the canvas to an absolute ratio\n     * @param {number} ratio - The target ratio.\n     * @param {Object} pivot - The zoom pivot point coordinate.\n     * @param {Event} _originalEvent - The original event if any.\n     * @returns {Cropper} this\n     */\n    zoomTo: function zoomTo(ratio, pivot, _originalEvent) {\n      var options = this.options,\n          canvasData = this.canvasData;\n      var width = canvasData.width,\n          height = canvasData.height,\n          naturalWidth = canvasData.naturalWidth,\n          naturalHeight = canvasData.naturalHeight;\n      ratio = Number(ratio);\n\n      if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {\n        var newWidth = naturalWidth * ratio;\n        var newHeight = naturalHeight * ratio;\n\n        if (dispatchEvent(this.element, EVENT_ZOOM, {\n          ratio: ratio,\n          oldRatio: width / naturalWidth,\n          originalEvent: _originalEvent\n        }) === false) {\n          return this;\n        }\n\n        if (_originalEvent) {\n          var pointers = this.pointers;\n          var offset = getOffset(this.cropper);\n          var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {\n            pageX: _originalEvent.pageX,\n            pageY: _originalEvent.pageY\n          }; // Zoom from the triggering point of the event\n\n          canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);\n        } else if (isPlainObject(pivot) && isNumber(pivot.x) && isNumber(pivot.y)) {\n          canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);\n          canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);\n        } else {\n          // Zoom from the center of the canvas\n          canvasData.left -= (newWidth - width) / 2;\n          canvasData.top -= (newHeight - height) / 2;\n        }\n\n        canvasData.width = newWidth;\n        canvasData.height = newHeight;\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Rotate the canvas with a relative degree\n     * @param {number} degree - The rotate degree.\n     * @returns {Cropper} this\n     */\n    rotate: function rotate(degree) {\n      return this.rotateTo((this.imageData.rotate || 0) + Number(degree));\n    },\n\n    /**\n     * Rotate the canvas to an absolute degree\n     * @param {number} degree - The rotate degree.\n     * @returns {Cropper} this\n     */\n    rotateTo: function rotateTo(degree) {\n      degree = Number(degree);\n\n      if (isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {\n        this.imageData.rotate = degree % 360;\n        this.renderCanvas(true, true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Scale the image on the x-axis.\n     * @param {number} scaleX - The scale ratio on the x-axis.\n     * @returns {Cropper} this\n     */\n    scaleX: function scaleX(_scaleX) {\n      var scaleY = this.imageData.scaleY;\n      return this.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n\n    /**\n     * Scale the image on the y-axis.\n     * @param {number} scaleY - The scale ratio on the y-axis.\n     * @returns {Cropper} this\n     */\n    scaleY: function scaleY(_scaleY) {\n      var scaleX = this.imageData.scaleX;\n      return this.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);\n    },\n\n    /**\n     * Scale the image\n     * @param {number} scaleX - The scale ratio on the x-axis.\n     * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.\n     * @returns {Cropper} this\n     */\n    scale: function scale(scaleX) {\n      var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;\n      var imageData = this.imageData;\n      var transformed = false;\n      scaleX = Number(scaleX);\n      scaleY = Number(scaleY);\n\n      if (this.ready && !this.disabled && this.options.scalable) {\n        if (isNumber(scaleX)) {\n          imageData.scaleX = scaleX;\n          transformed = true;\n        }\n\n        if (isNumber(scaleY)) {\n          imageData.scaleY = scaleY;\n          transformed = true;\n        }\n\n        if (transformed) {\n          this.renderCanvas(true, true);\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     * @param {boolean} [rounded=false] - Indicate if round the data values or not.\n     * @returns {Object} The result cropped data.\n     */\n    getData: function getData() {\n      var rounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var options = this.options,\n          imageData = this.imageData,\n          canvasData = this.canvasData,\n          cropBoxData = this.cropBoxData;\n      var data;\n\n      if (this.ready && this.cropped) {\n        data = {\n          x: cropBoxData.left - canvasData.left,\n          y: cropBoxData.top - canvasData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n        var ratio = imageData.width / imageData.naturalWidth;\n        forEach(data, function (n, i) {\n          data[i] = n / ratio;\n        });\n\n        if (rounded) {\n          // In case rounding off leads to extra 1px in right or bottom border\n          // we should round the top-left corner and the dimension (#343).\n          var bottom = Math.round(data.y + data.height);\n          var right = Math.round(data.x + data.width);\n          data.x = Math.round(data.x);\n          data.y = Math.round(data.y);\n          data.width = right - data.x;\n          data.height = bottom - data.y;\n        }\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (options.rotatable) {\n        data.rotate = imageData.rotate || 0;\n      }\n\n      if (options.scalable) {\n        data.scaleX = imageData.scaleX || 1;\n        data.scaleY = imageData.scaleY || 1;\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the cropped area position and size with new data\n     * @param {Object} data - The new data.\n     * @returns {Cropper} this\n     */\n    setData: function setData(data) {\n      var options = this.options,\n          imageData = this.imageData,\n          canvasData = this.canvasData;\n      var cropBoxData = {};\n\n      if (this.ready && !this.disabled && isPlainObject(data)) {\n        var transformed = false;\n\n        if (options.rotatable) {\n          if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {\n            imageData.rotate = data.rotate;\n            transformed = true;\n          }\n        }\n\n        if (options.scalable) {\n          if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {\n            imageData.scaleX = data.scaleX;\n            transformed = true;\n          }\n\n          if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {\n            imageData.scaleY = data.scaleY;\n            transformed = true;\n          }\n        }\n\n        if (transformed) {\n          this.renderCanvas(true, true);\n        }\n\n        var ratio = imageData.width / imageData.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvasData.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvasData.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        this.setCropBoxData(cropBoxData);\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the container size data.\n     * @returns {Object} The result container data.\n     */\n    getContainerData: function getContainerData() {\n      return this.ready ? assign({}, this.containerData) : {};\n    },\n\n    /**\n     * Get the image position and size data.\n     * @returns {Object} The result image data.\n     */\n    getImageData: function getImageData() {\n      return this.sized ? assign({}, this.imageData) : {};\n    },\n\n    /**\n     * Get the canvas position and size data.\n     * @returns {Object} The result canvas data.\n     */\n    getCanvasData: function getCanvasData() {\n      var canvasData = this.canvasData;\n      var data = {};\n\n      if (this.ready) {\n        forEach(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {\n          data[n] = canvasData[n];\n        });\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the canvas position and size with new data.\n     * @param {Object} data - The new canvas data.\n     * @returns {Cropper} this\n     */\n    setCanvasData: function setCanvasData(data) {\n      var canvasData = this.canvasData;\n      var aspectRatio = canvasData.aspectRatio;\n\n      if (this.ready && !this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvasData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvasData.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvasData.width = data.width;\n          canvasData.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvasData.height = data.height;\n          canvasData.width = data.height * aspectRatio;\n        }\n\n        this.renderCanvas(true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the crop box position and size data.\n     * @returns {Object} The result crop box data.\n     */\n    getCropBoxData: function getCropBoxData() {\n      var cropBoxData = this.cropBoxData;\n      var data;\n\n      if (this.ready && this.cropped) {\n        data = {\n          left: cropBoxData.left,\n          top: cropBoxData.top,\n          width: cropBoxData.width,\n          height: cropBoxData.height\n        };\n      }\n\n      return data || {};\n    },\n\n    /**\n     * Set the crop box position and size with new data.\n     * @param {Object} data - The new crop box data.\n     * @returns {Cropper} this\n     */\n    setCropBoxData: function setCropBoxData(data) {\n      var cropBoxData = this.cropBoxData;\n      var aspectRatio = this.options.aspectRatio;\n      var widthChanged;\n      var heightChanged;\n\n      if (this.ready && this.cropped && !this.disabled && isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          cropBoxData.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBoxData.top = data.top;\n        }\n\n        if (isNumber(data.width) && data.width !== cropBoxData.width) {\n          widthChanged = true;\n          cropBoxData.width = data.width;\n        }\n\n        if (isNumber(data.height) && data.height !== cropBoxData.height) {\n          heightChanged = true;\n          cropBoxData.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (widthChanged) {\n            cropBoxData.height = cropBoxData.width / aspectRatio;\n          } else if (heightChanged) {\n            cropBoxData.width = cropBoxData.height * aspectRatio;\n          }\n        }\n\n        this.renderCropBox();\n      }\n\n      return this;\n    },\n\n    /**\n     * Get a canvas drawn the cropped image.\n     * @param {Object} [options={}] - The config options.\n     * @returns {HTMLCanvasElement} - The result canvas.\n     */\n    getCroppedCanvas: function getCroppedCanvas() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this.ready || !window.HTMLCanvasElement) {\n        return null;\n      }\n\n      var canvasData = this.canvasData;\n      var source = getSourceCanvas(this.image, this.imageData, canvasData, options); // Returns the source canvas if it is not cropped.\n\n      if (!this.cropped) {\n        return source;\n      }\n\n      var _this$getData = this.getData(),\n          initialX = _this$getData.x,\n          initialY = _this$getData.y,\n          initialWidth = _this$getData.width,\n          initialHeight = _this$getData.height;\n\n      var ratio = source.width / Math.floor(canvasData.naturalWidth);\n\n      if (ratio !== 1) {\n        initialX *= ratio;\n        initialY *= ratio;\n        initialWidth *= ratio;\n        initialHeight *= ratio;\n      }\n\n      var aspectRatio = initialWidth / initialHeight;\n      var maxSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.maxWidth || Infinity,\n        height: options.maxHeight || Infinity\n      });\n      var minSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.minWidth || 0,\n        height: options.minHeight || 0\n      }, 'cover');\n\n      var _getAdjustedSizes = getAdjustedSizes({\n        aspectRatio: aspectRatio,\n        width: options.width || (ratio !== 1 ? source.width : initialWidth),\n        height: options.height || (ratio !== 1 ? source.height : initialHeight)\n      }),\n          width = _getAdjustedSizes.width,\n          height = _getAdjustedSizes.height;\n\n      width = Math.min(maxSizes.width, Math.max(minSizes.width, width));\n      height = Math.min(maxSizes.height, Math.max(minSizes.height, height));\n      var canvas = document.createElement('canvas');\n      var context = canvas.getContext('2d');\n      canvas.width = normalizeDecimalNumber(width);\n      canvas.height = normalizeDecimalNumber(height);\n      context.fillStyle = options.fillColor || 'transparent';\n      context.fillRect(0, 0, width, height);\n      var _options$imageSmoothi = options.imageSmoothingEnabled,\n          imageSmoothingEnabled = _options$imageSmoothi === void 0 ? true : _options$imageSmoothi,\n          imageSmoothingQuality = options.imageSmoothingQuality;\n      context.imageSmoothingEnabled = imageSmoothingEnabled;\n\n      if (imageSmoothingQuality) {\n        context.imageSmoothingQuality = imageSmoothingQuality;\n      } // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n\n\n      var sourceWidth = source.width;\n      var sourceHeight = source.height; // Source canvas parameters\n\n      var srcX = initialX;\n      var srcY = initialY;\n      var srcWidth;\n      var srcHeight; // Destination canvas parameters\n\n      var dstX;\n      var dstY;\n      var dstWidth;\n      var dstHeight;\n\n      if (srcX <= -initialWidth || srcX > sourceWidth) {\n        srcX = 0;\n        srcWidth = 0;\n        dstX = 0;\n        dstWidth = 0;\n      } else if (srcX <= 0) {\n        dstX = -srcX;\n        srcX = 0;\n        srcWidth = Math.min(sourceWidth, initialWidth + srcX);\n        dstWidth = srcWidth;\n      } else if (srcX <= sourceWidth) {\n        dstX = 0;\n        srcWidth = Math.min(initialWidth, sourceWidth - srcX);\n        dstWidth = srcWidth;\n      }\n\n      if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {\n        srcY = 0;\n        srcHeight = 0;\n        dstY = 0;\n        dstHeight = 0;\n      } else if (srcY <= 0) {\n        dstY = -srcY;\n        srcY = 0;\n        srcHeight = Math.min(sourceHeight, initialHeight + srcY);\n        dstHeight = srcHeight;\n      } else if (srcY <= sourceHeight) {\n        dstY = 0;\n        srcHeight = Math.min(initialHeight, sourceHeight - srcY);\n        dstHeight = srcHeight;\n      }\n\n      var params = [srcX, srcY, srcWidth, srcHeight]; // Avoid \"IndexSizeError\"\n\n      if (dstWidth > 0 && dstHeight > 0) {\n        var scale = width / initialWidth;\n        params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);\n      } // All the numerical parameters should be integer for `drawImage`\n      // https://github.com/fengyuanchen/cropper/issues/476\n\n\n      context.drawImage.apply(context, [source].concat(_toConsumableArray(params.map(function (param) {\n        return Math.floor(normalizeDecimalNumber(param));\n      }))));\n      return canvas;\n    },\n\n    /**\n     * Change the aspect ratio of the crop box.\n     * @param {number} aspectRatio - The new aspect ratio.\n     * @returns {Cropper} this\n     */\n    setAspectRatio: function setAspectRatio(aspectRatio) {\n      var options = this.options;\n\n      if (!this.disabled && !isUndefined(aspectRatio)) {\n        // 0 -> NaN\n        options.aspectRatio = Math.max(0, aspectRatio) || NaN;\n\n        if (this.ready) {\n          this.initCropBox();\n\n          if (this.cropped) {\n            this.renderCropBox();\n          }\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Change the drag mode.\n     * @param {string} mode - The new drag mode.\n     * @returns {Cropper} this\n     */\n    setDragMode: function setDragMode(mode) {\n      var options = this.options,\n          dragBox = this.dragBox,\n          face = this.face;\n\n      if (this.ready && !this.disabled) {\n        var croppable = mode === DRAG_MODE_CROP;\n        var movable = options.movable && mode === DRAG_MODE_MOVE;\n        mode = croppable || movable ? mode : DRAG_MODE_NONE;\n        options.dragMode = mode;\n        setData(dragBox, DATA_ACTION, mode);\n        toggleClass(dragBox, CLASS_CROP, croppable);\n        toggleClass(dragBox, CLASS_MOVE, movable);\n\n        if (!options.cropBoxMovable) {\n          // Sync drag mode to crop box when it is not movable\n          setData(face, DATA_ACTION, mode);\n          toggleClass(face, CLASS_CROP, croppable);\n          toggleClass(face, CLASS_MOVE, movable);\n        }\n      }\n\n      return this;\n    }\n  };\n\n  var AnotherCropper = WINDOW.Cropper;\n\n  var Cropper =\n  /*#__PURE__*/\n  function () {\n    /**\n     * Create a new Cropper.\n     * @param {Element} element - The target element for cropping.\n     * @param {Object} [options={}] - The configuration options.\n     */\n    function Cropper(element) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, Cropper);\n\n      if (!element || !REGEXP_TAG_NAME.test(element.tagName)) {\n        throw new Error('The first argument is required and must be an <img> or <canvas> element.');\n      }\n\n      this.element = element;\n      this.options = assign({}, DEFAULTS, isPlainObject(options) && options);\n      this.cropped = false;\n      this.disabled = false;\n      this.pointers = {};\n      this.ready = false;\n      this.reloading = false;\n      this.replaced = false;\n      this.sized = false;\n      this.sizing = false;\n      this.init();\n    }\n\n    _createClass(Cropper, [{\n      key: \"init\",\n      value: function init() {\n        var element = this.element;\n        var tagName = element.tagName.toLowerCase();\n        var url;\n\n        if (element[NAMESPACE]) {\n          return;\n        }\n\n        element[NAMESPACE] = this;\n\n        if (tagName === 'img') {\n          this.isImg = true; // e.g.: \"img/picture.jpg\"\n\n          url = element.getAttribute('src') || '';\n          this.originalUrl = url; // Stop when it's a blank image\n\n          if (!url) {\n            return;\n          } // e.g.: \"http://example.com/img/picture.jpg\"\n\n\n          url = element.src;\n        } else if (tagName === 'canvas' && window.HTMLCanvasElement) {\n          url = element.toDataURL();\n        }\n\n        this.load(url);\n      }\n    }, {\n      key: \"load\",\n      value: function load(url) {\n        var _this = this;\n\n        if (!url) {\n          return;\n        }\n\n        this.url = url;\n        this.imageData = {};\n        var element = this.element,\n            options = this.options;\n\n        if (!options.rotatable && !options.scalable) {\n          options.checkOrientation = false;\n        } // Only IE10+ supports Typed Arrays\n\n\n        if (!options.checkOrientation || !window.ArrayBuffer) {\n          this.clone();\n          return;\n        } // Read ArrayBuffer from Data URL of JPEG images directly for better performance.\n\n\n        if (REGEXP_DATA_URL_JPEG.test(url)) {\n          this.read(dataURLToArrayBuffer(url));\n          return;\n        }\n\n        var xhr = new XMLHttpRequest();\n        var clone = this.clone.bind(this);\n        this.reloading = true;\n        this.xhr = xhr; // 1. Cross origin requests are only supported for protocol schemes:\n        // http, https, data, chrome, chrome-extension.\n        // 2. Access to XMLHttpRequest from a Data URL will be blocked by CORS policy\n        // in some browsers as IE11 and Safari.\n\n        xhr.onabort = clone;\n        xhr.onerror = clone;\n        xhr.ontimeout = clone;\n\n        xhr.onprogress = function () {\n          if (xhr.getResponseHeader('content-type') !== MIME_TYPE_JPEG) {\n            xhr.abort();\n          }\n        };\n\n        xhr.onload = function () {\n          _this.read(xhr.response);\n        };\n\n        xhr.onloadend = function () {\n          _this.reloading = false;\n          _this.xhr = null;\n        }; // Bust cache when there is a \"crossOrigin\" property to avoid browser cache error\n\n\n        if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {\n          url = addTimestamp(url);\n        }\n\n        xhr.open('GET', url);\n        xhr.responseType = 'arraybuffer';\n        xhr.withCredentials = element.crossOrigin === 'use-credentials';\n        xhr.send();\n      }\n    }, {\n      key: \"read\",\n      value: function read(arrayBuffer) {\n        var options = this.options,\n            imageData = this.imageData; // Reset the orientation value to its default value 1\n        // as some iOS browsers will render image with its orientation\n\n        var orientation = resetAndGetOrientation(arrayBuffer);\n        var rotate = 0;\n        var scaleX = 1;\n        var scaleY = 1;\n\n        if (orientation > 1) {\n          // Generate a new URL which has the default orientation value\n          this.url = arrayBufferToDataURL(arrayBuffer, MIME_TYPE_JPEG);\n\n          var _parseOrientation = parseOrientation(orientation);\n\n          rotate = _parseOrientation.rotate;\n          scaleX = _parseOrientation.scaleX;\n          scaleY = _parseOrientation.scaleY;\n        }\n\n        if (options.rotatable) {\n          imageData.rotate = rotate;\n        }\n\n        if (options.scalable) {\n          imageData.scaleX = scaleX;\n          imageData.scaleY = scaleY;\n        }\n\n        this.clone();\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        var element = this.element,\n            url = this.url;\n        var crossOrigin;\n        var crossOriginUrl;\n\n        if (this.options.checkCrossOrigin && isCrossOriginURL(url)) {\n          crossOrigin = element.crossOrigin;\n\n          if (!crossOrigin) {\n            crossOrigin = 'anonymous';\n          } // Bust cache when there is not a \"crossOrigin\" property (#519)\n\n\n          crossOriginUrl = addTimestamp(url);\n        }\n\n        this.crossOrigin = crossOrigin;\n        this.crossOriginUrl = crossOriginUrl;\n        var image = document.createElement('img');\n\n        if (crossOrigin) {\n          image.crossOrigin = crossOrigin;\n        }\n\n        image.src = crossOriginUrl || url;\n        this.image = image;\n        image.onload = this.start.bind(this);\n        image.onerror = this.stop.bind(this);\n        addClass(image, CLASS_HIDE);\n        element.parentNode.insertBefore(image, element.nextSibling);\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        var _this2 = this;\n\n        var image = this.isImg ? this.element : this.image;\n        image.onload = null;\n        image.onerror = null;\n        this.sizing = true;\n        var IS_SAFARI = WINDOW.navigator && /^(?:.(?!chrome|android))*safari/i.test(WINDOW.navigator.userAgent);\n\n        var done = function done(naturalWidth, naturalHeight) {\n          assign(_this2.imageData, {\n            naturalWidth: naturalWidth,\n            naturalHeight: naturalHeight,\n            aspectRatio: naturalWidth / naturalHeight\n          });\n          _this2.sizing = false;\n          _this2.sized = true;\n\n          _this2.build();\n        }; // Modern browsers (except Safari)\n\n\n        if (image.naturalWidth && !IS_SAFARI) {\n          done(image.naturalWidth, image.naturalHeight);\n          return;\n        }\n\n        var sizingImage = document.createElement('img');\n        var body = document.body || document.documentElement;\n        this.sizingImage = sizingImage;\n\n        sizingImage.onload = function () {\n          done(sizingImage.width, sizingImage.height);\n\n          if (!IS_SAFARI) {\n            body.removeChild(sizingImage);\n          }\n        };\n\n        sizingImage.src = image.src; // iOS Safari will convert the image automatically\n        // with its orientation once append it into DOM (#279)\n\n        if (!IS_SAFARI) {\n          sizingImage.style.cssText = 'left:0;' + 'max-height:none!important;' + 'max-width:none!important;' + 'min-height:0!important;' + 'min-width:0!important;' + 'opacity:0;' + 'position:absolute;' + 'top:0;' + 'z-index:-1;';\n          body.appendChild(sizingImage);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var image = this.image;\n        image.onload = null;\n        image.onerror = null;\n        image.parentNode.removeChild(image);\n        this.image = null;\n      }\n    }, {\n      key: \"build\",\n      value: function build() {\n        if (!this.sized || this.ready) {\n          return;\n        }\n\n        var element = this.element,\n            options = this.options,\n            image = this.image; // Create cropper elements\n\n        var container = element.parentNode;\n        var template = document.createElement('div');\n        template.innerHTML = TEMPLATE;\n        var cropper = template.querySelector(\".\".concat(NAMESPACE, \"-container\"));\n        var canvas = cropper.querySelector(\".\".concat(NAMESPACE, \"-canvas\"));\n        var dragBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-drag-box\"));\n        var cropBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-crop-box\"));\n        var face = cropBox.querySelector(\".\".concat(NAMESPACE, \"-face\"));\n        this.container = container;\n        this.cropper = cropper;\n        this.canvas = canvas;\n        this.dragBox = dragBox;\n        this.cropBox = cropBox;\n        this.viewBox = cropper.querySelector(\".\".concat(NAMESPACE, \"-view-box\"));\n        this.face = face;\n        canvas.appendChild(image); // Hide the original image\n\n        addClass(element, CLASS_HIDDEN); // Inserts the cropper after to the current image\n\n        container.insertBefore(cropper, element.nextSibling); // Show the image if is hidden\n\n        if (!this.isImg) {\n          removeClass(image, CLASS_HIDE);\n        }\n\n        this.initPreview();\n        this.bind();\n        options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;\n        options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;\n        options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;\n        addClass(cropBox, CLASS_HIDDEN);\n\n        if (!options.guides) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-dashed\")), CLASS_HIDDEN);\n        }\n\n        if (!options.center) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-center\")), CLASS_HIDDEN);\n        }\n\n        if (options.background) {\n          addClass(cropper, \"\".concat(NAMESPACE, \"-bg\"));\n        }\n\n        if (!options.highlight) {\n          addClass(face, CLASS_INVISIBLE);\n        }\n\n        if (options.cropBoxMovable) {\n          addClass(face, CLASS_MOVE);\n          setData(face, DATA_ACTION, ACTION_ALL);\n        }\n\n        if (!options.cropBoxResizable) {\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-line\")), CLASS_HIDDEN);\n          addClass(cropBox.getElementsByClassName(\"\".concat(NAMESPACE, \"-point\")), CLASS_HIDDEN);\n        }\n\n        this.render();\n        this.ready = true;\n        this.setDragMode(options.dragMode);\n\n        if (options.autoCrop) {\n          this.crop();\n        }\n\n        this.setData(options.data);\n\n        if (isFunction(options.ready)) {\n          addListener(element, EVENT_READY, options.ready, {\n            once: true\n          });\n        }\n\n        dispatchEvent(element, EVENT_READY);\n      }\n    }, {\n      key: \"unbuild\",\n      value: function unbuild() {\n        if (!this.ready) {\n          return;\n        }\n\n        this.ready = false;\n        this.unbind();\n        this.resetPreview();\n        this.cropper.parentNode.removeChild(this.cropper);\n        removeClass(this.element, CLASS_HIDDEN);\n      }\n    }, {\n      key: \"uncreate\",\n      value: function uncreate() {\n        if (this.ready) {\n          this.unbuild();\n          this.ready = false;\n          this.cropped = false;\n        } else if (this.sizing) {\n          this.sizingImage.onload = null;\n          this.sizing = false;\n          this.sized = false;\n        } else if (this.reloading) {\n          this.xhr.onabort = null;\n          this.xhr.abort();\n        } else if (this.image) {\n          this.stop();\n        }\n      }\n      /**\n       * Get the no conflict cropper class.\n       * @returns {Cropper} The cropper class.\n       */\n\n    }], [{\n      key: \"noConflict\",\n      value: function noConflict() {\n        window.Cropper = AnotherCropper;\n        return Cropper;\n      }\n      /**\n       * Change the default options.\n       * @param {Object} options - The new default options.\n       */\n\n    }, {\n      key: \"setDefaults\",\n      value: function setDefaults(options) {\n        assign(DEFAULTS, isPlainObject(options) && options);\n      }\n    }]);\n\n    return Cropper;\n  }();\n\n  assign(Cropper.prototype, render, preview, events, handlers, change, methods);\n\n  return Cropper;\n\n}));\n","/*!\r\n * Snackbar v0.1.14\r\n * http://polonel.com/Snackbar\r\n *\r\n * Copyright 2018 Chris Brame and other contributors\r\n * Released under the MIT license\r\n * https://github.com/polonel/Snackbar/blob/master/LICENSE\r\n */\r\n\r\n(function(root, factory) {\r\n    'use strict';\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([], function() {\r\n            return (root.Snackbar = factory());\r\n        });\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        module.exports = root.Snackbar = factory();\r\n    } else {\r\n        root.Snackbar = factory();\r\n    }\r\n})(this, function() {\r\n    var Snackbar = {};\r\n\r\n    Snackbar.current = null;\r\n    var $defaults = {\r\n        text: 'Default Text',\r\n        textColor: '#FFFFFF',\r\n        width: 'auto',\r\n        showAction: true,\r\n        actionText: 'Dismiss',\r\n        actionTextAria: 'Dismiss, Description for Screen Readers',\r\n        actionTextColor: '#4CAF50',\r\n        showSecondButton: false,\r\n        secondButtonText: '',\r\n        secondButtonAria: 'Description for Screen Readers',\r\n        secondButtonTextColor: '#4CAF50',\r\n        backgroundColor: '#323232',\r\n        pos: 'bottom-left',\r\n        duration: 5000,\r\n        customClass: '',\r\n        onActionClick: function(element) {\r\n            element.style.opacity = 0;\r\n        },\r\n        onSecondButtonClick: function(element) {},\r\n        onClose: function(element) {}\r\n    };\r\n\r\n    Snackbar.show = function($options) {\r\n        var options = Extend(true, $defaults, $options);\r\n\r\n        if (Snackbar.current) {\r\n            Snackbar.current.style.opacity = 0;\r\n            setTimeout(\r\n                function() {\r\n                    var $parent = this.parentElement;\r\n                    if ($parent)\r\n                    // possible null if too many/fast Snackbars\r\n                        $parent.removeChild(this);\r\n                }.bind(Snackbar.current),\r\n                500\r\n            );\r\n        }\r\n\r\n        Snackbar.snackbar = document.createElement('div');\r\n        Snackbar.snackbar.className = 'snackbar-container ' + options.customClass;\r\n        Snackbar.snackbar.style.width = options.width;\r\n        var $p = document.createElement('p');\r\n        $p.style.margin = 0;\r\n        $p.style.padding = 0;\r\n        $p.style.color = options.textColor;\r\n        $p.style.fontSize = '14px';\r\n        $p.style.fontWeight = 300;\r\n        $p.style.lineHeight = '1em';\r\n        $p.innerHTML = options.text;\r\n        Snackbar.snackbar.appendChild($p);\r\n        Snackbar.snackbar.style.background = options.backgroundColor;\r\n\r\n        if (options.showSecondButton) {\r\n            var secondButton = document.createElement('button');\r\n            secondButton.className = 'action';\r\n            secondButton.innerHTML = options.secondButtonText;\r\n            secondButton.setAttribute('aria-label', options.secondButtonAria);\r\n            secondButton.style.color = options.secondButtonTextColor;\r\n            secondButton.addEventListener('click', function() {\r\n                options.onSecondButtonClick(Snackbar.snackbar);\r\n            });\r\n            Snackbar.snackbar.appendChild(secondButton);\r\n        }\r\n\r\n        if (options.showAction) {\r\n            var actionButton = document.createElement('button');\r\n            actionButton.className = 'action';\r\n            actionButton.innerHTML = options.actionText;\r\n            actionButton.setAttribute('aria-label', options.actionTextAria);\r\n            actionButton.style.color = options.actionTextColor;\r\n            actionButton.addEventListener('click', function() {\r\n                options.onActionClick(Snackbar.snackbar);\r\n            });\r\n            Snackbar.snackbar.appendChild(actionButton);\r\n        }\r\n\r\n        if (options.duration) {\r\n            setTimeout(\r\n                function() {\r\n                    if (Snackbar.current === this) {\r\n                        Snackbar.current.style.opacity = 0;\r\n                        // When natural remove event occurs let's move the snackbar to its origins\r\n                        Snackbar.current.style.top = '-100px';\r\n                        Snackbar.current.style.bottom = '-100px';\r\n                    }\r\n                }.bind(Snackbar.snackbar),\r\n                options.duration\r\n            );\r\n        }\r\n\r\n        Snackbar.snackbar.addEventListener(\r\n            'transitionend',\r\n            function(event, elapsed) {\r\n                if (event.propertyName === 'opacity' && this.style.opacity === '0') {\r\n                    if (typeof(options.onClose) === 'function')\r\n                        options.onClose(this);\r\n\r\n                    this.parentElement.removeChild(this);\r\n                    if (Snackbar.current === this) {\r\n                        Snackbar.current = null;\r\n                    }\r\n                }\r\n            }.bind(Snackbar.snackbar)\r\n        );\r\n\r\n        Snackbar.current = Snackbar.snackbar;\r\n\r\n        document.body.appendChild(Snackbar.snackbar);\r\n        var $bottom = getComputedStyle(Snackbar.snackbar).bottom;\r\n        var $top = getComputedStyle(Snackbar.snackbar).top;\r\n        Snackbar.snackbar.style.opacity = 1;\r\n        Snackbar.snackbar.className =\r\n            'snackbar-container ' + options.customClass + ' snackbar-pos ' + options.pos;\r\n    };\r\n\r\n    Snackbar.close = function() {\r\n        if (Snackbar.current) {\r\n            Snackbar.current.style.opacity = 0;\r\n        }\r\n    };\r\n\r\n    // Pure JS Extend\r\n    // http://gomakethings.com/vanilla-javascript-version-of-jquery-extend/\r\n    var Extend = function() {\r\n        var extended = {};\r\n        var deep = false;\r\n        var i = 0;\r\n        var length = arguments.length;\r\n\r\n        if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\r\n            deep = arguments[0];\r\n            i++;\r\n        }\r\n\r\n        var merge = function(obj) {\r\n            for (var prop in obj) {\r\n                if (Object.prototype.hasOwnProperty.call(obj, prop)) {\r\n                    if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\r\n                        extended[prop] = Extend(true, extended[prop], obj[prop]);\r\n                    } else {\r\n                        extended[prop] = obj[prop];\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        for (; i < length; i++) {\r\n            var obj = arguments[i];\r\n            merge(obj);\r\n        }\r\n\r\n        return extended;\r\n    };\r\n\r\n    return Snackbar;\r\n});\r\n"],"sourceRoot":""}